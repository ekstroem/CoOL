epochs = 50000, patience = 100,
plot_and_evaluation_frequency = 50, IPCW = NA, L1=0.00001, spline_df=10) {
X_test = X_train
Y_test = Y_train
if (is.na(IPCW)) IPCW <- rep(1,nrow(X_train))
for (lr_set in lr) {
print(paste0("############################## Learning rate: ",lr_set," ##############################"))
performance = model$train_performance
performance_test = model$test_performance
weight_performance = model$weight_performance
baseline_risk_monitor = model$baseline_risk_monitor
par(mfrow=c(1,3));par(mar=c(3,5,3,1))
for(rounds in 1:ceiling(c(epochs/plot_and_evaluation_frequency))) {
model <- CoOL_cpp_train_network_relu(x=as.matrix(X_train),y=as.matrix(Y_train),testx=as.matrix(X_test),testy=as.matrix(Y_test),
lr = lr_set, maxepochs  = plot_and_evaluation_frequency, W1_input = model[[1]],B1_input = model[[2]],
W2_input = model[[3]],B2_input = model[[4]], IPCW = IPCW, L1=L1)
performance <- c(performance,model$train_performance)
performance_test <- c(performance_test,model$test_performance)
weight_performance <- c(weight_performance,model$weight_performance)
baseline_risk_monitor <- c(baseline_risk_monitor,model$baseline_risk_monitor)
plot(performance, type='l',yaxs='i', ylab="Mean squared error",
xlab="Epochs",main="Performance on training data set")
points(smooth.spline(performance, df = spline_df),col="red",type='l',lwd=2)
#      plot(performance_test, type='l',yaxs='i', ylab="Mean squared error",
#           xlab="Epochs",main="Performance on test data set")
plot(log(weight_performance), type='l', ylab="log of mean squared weight difference",
xlab="Epochs",main="Log mean squared weight difference")
points(smooth.spline(log(weight_performance), df = spline_df),col="red",type='l',lwd=2)
plot(baseline_risk_monitor,type='l', main="Estimated baseline risk by epoch")
abline(h=mean(Y_train),lty=2)
points(smooth.spline(baseline_risk_monitor, df = spline_df),col="red",type='l',lwd=2)
if(length(performance)-which.min(performance)>patience) break
}
model$train_performance <- c(performance)
model$test_performance <-  c(performance_test)
model$weight_performance <-  c(weight_performance)
model$baseline_risk_monitor <- c(baseline_risk_monitor)
model$epochs = epochs
}
par(mfrow=c(1,1))
return(model)
}
# Initiate the non-negative model
model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data)
# Train the non-negative model (The model can be )
model <- CoOL_2_train_neural_network(X_train=exposure_data, Y_train=outcome_data, model=model, epochs=300)
# Model performance
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="A) Performance - training data")
# Model performance
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance - training data")
# Model visualisation
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "B) Model")
# Model visualisation
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model")
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE))
# Model performance
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance - training data")
# Model visualisation
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model")
# AUC
CoOL_4_AUC(outcome_data,exposure_data,model)
# Risk contributions
risk_contributions <- CoOL_5_layerwise_relevance_propagation(exposure_data,model)
# Dendrogram and assigned sub-groups
sub_groups <- CoOL_6_dendrogram_and_clusters(risk_contributions,number_of_subgroups = 3)
# Prevalence and mean risk plot
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups)
#  Mean risk contributions by sub-groups
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups)
# Train the non-negative model (The model can be )
model <- CoOL_2_train_neural_network(X_train=exposure_data, Y_train=outcome_data, model=model, epochs=300)
# Model performance
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance - training data")
# Model visualisation
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model")
# AUC
CoOL_4_AUC(outcome_data,exposure_data,model)
# Risk contributions
risk_contributions <- CoOL_5_layerwise_relevance_propagation(exposure_data,model)
# Dendrogram and assigned sub-groups
sub_groups <- CoOL_6_dendrogram_and_clusters(risk_contributions,number_of_subgroups = 3)
# Prevalence and mean risk plot
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups)
# Dendrogram and assigned sub-groups
sub_groups <- CoOL_6_dendrogram_and_clusters(risk_contributions,number_of_subgroups = 3)
CoOL_6_dendrogram <- function(risk_contributions,number_of_subgroups=3, title = "Dendrogram") {
library(ClustGeo)
p <- cbind(risk_contributions)
p <- plyr::count(p)
pfreq <- p$freq
p <- p[,-c(ncol(p))]
p_h_c <- hclustgeo(dist(p,method = "manhattan"), wt=pfreq)
pclus <- cutree(p_h_c, number_of_subgroups)
id <- 1:nrow(r_c)
temp <- merge(cbind(id,r_c),cbind(p,pclus))
clus <- temp$pclus[order(temp$id)]
table(clus)
library(ggtree)
library(ggplot2)
library(wesanderson)
colours <- c("grey",wes_palette("Darjeeling1"))
print(ggtree(p_h_c,layout="equal_angle") +
geom_tippoint(size=sqrt(pfreq)/2, alpha=.2, color=colours[pclus])+
ggtitle(title) +
theme(plot.title = element_text(size = 15, face = "bold")))
}
CoOL_6_clusters <- function(risk_contributions,number_of_subgroups=3, title = "Dendrogram") {
library(ClustGeo)
p <- cbind(risk_contributions)
p <- plyr::count(p)
pfreq <- p$freq
p <- p[,-c(ncol(p))]
p_h_c <- hclustgeo(dist(p,method = "manhattan"), wt=pfreq)
pclus <- cutree(p_h_c, number_of_subgroups)
id <- 1:nrow(r_c)
temp <- merge(cbind(id,r_c),cbind(p,pclus))
clus <- temp$pclus[order(temp$id)]
table(clus)
return(clus)
}
CoOL_6_dendrogram <- function(risk_contributions,number_of_subgroups=3, title = "Dendrogram") {
library(ClustGeo)
p <- cbind(risk_contributions)
p <- plyr::count(p)
pfreq <- p$freq
p <- p[,-c(ncol(p))]
p_h_c <- hclustgeo(dist(p,method = "manhattan"), wt=pfreq)
pclus <- cutree(p_h_c, number_of_subgroups)
id <- 1:nrow(r_c)
temp <- merge(cbind(id,r_c),cbind(p,pclus))
clus <- temp$pclus[order(temp$id)]
table(clus)
library(ggtree)
library(ggplot2)
library(wesanderson)
colours <- c("grey",wes_palette("Darjeeling1"))
return(print(ggtree(p_h_c,layout="equal_angle") +
geom_tippoint(size=sqrt(pfreq)/2, alpha=.2, color=colours[pclus])+
ggtitle(title) +
theme(plot.title = element_text(size = 15, face = "bold"))))
}
# Dendrogram
dendrogram_plot <- CoOL_6_dendrogram_and_clusters(risk_contributions,number_of_subgroups = 3)
dendrogram_plot
setwd("C:/Users/lvb917/Desktop")
CoOL_6_dendrogram <- function(risk_contributions,number_of_subgroups=3, title = "Dendrogram",working_directory) {
if ("working_directory" %in% names(list(...))) {
print("problem")
}
library(ClustGeo)
p <- cbind(risk_contributions)
p <- plyr::count(p)
pfreq <- p$freq
p <- p[,-c(ncol(p))]
p_h_c <- hclustgeo(dist(p,method = "manhattan"), wt=pfreq)
pclus <- cutree(p_h_c, number_of_subgroups)
id <- 1:nrow(r_c)
temp <- merge(cbind(id,r_c),cbind(p,pclus))
clus <- temp$pclus[order(temp$id)]
table(clus)
library(ggtree)
library(ggplot2)
library(wesanderson)
colours <- c("grey",wes_palette("Darjeeling1"))
return(print(ggtree(p_h_c,layout="equal_angle") +
geom_tippoint(size=sqrt(pfreq)/2, alpha=.2, color=colours[pclus])+
ggtitle(title) +
theme(plot.title = element_text(size = 15, face = "bold"))))
library(imager)
im <- load.image("dendrogram.png")
par(mar=c(0,0,0,0))
plot(im,axes=F)
}
CoOL_6_dendrogram()
exists(working_directory)
exists("working_directory")
CoOL_6_dendrogram <- function(risk_contributions,number_of_subgroups=3, title = "Dendrogram",working_directory) {
if (exists("working_directory")==0) {
print("problem")
}
library(ClustGeo)
p <- cbind(risk_contributions)
p <- plyr::count(p)
pfreq <- p$freq
p <- p[,-c(ncol(p))]
p_h_c <- hclustgeo(dist(p,method = "manhattan"), wt=pfreq)
pclus <- cutree(p_h_c, number_of_subgroups)
id <- 1:nrow(r_c)
temp <- merge(cbind(id,r_c),cbind(p,pclus))
clus <- temp$pclus[order(temp$id)]
table(clus)
library(ggtree)
library(ggplot2)
library(wesanderson)
colours <- c("grey",wes_palette("Darjeeling1"))
return(print(ggtree(p_h_c,layout="equal_angle") +
geom_tippoint(size=sqrt(pfreq)/2, alpha=.2, color=colours[pclus])+
ggtitle(title) +
theme(plot.title = element_text(size = 15, face = "bold"))))
library(imager)
im <- load.image("dendrogram.png")
par(mar=c(0,0,0,0))
plot(im,axes=F)
}
CoOL_6_dendrogram()
CoOL_7_prevalence_and_mean_risk_plot <- function(risk_contributions,sub_groups,title="Prevalence and mean risk\nof sub-groups") {
library(wesanderson)
par(mar=c(5,3,2,2))
colours <- c("grey",wes_palette("Darjeeling1"))
plot(0,0,type='n',xlim=c(0,1),ylim=c(0,max(pred)),xaxs='i',yaxs='i',
axes=FALSE,ylab="Risk",xlab="Prevalence",frame.plot=FALSE,main=title)
axis(1,seq(0,1,.2));axis(2,seq(0,1,.05))
rect(0,0,1,1)
prev0 = 0; total = 0
for (i in 1:max(sub_groups)) {
prev <- sum(sub_groups==i)/length(sub_groups)
risk <- sum(colMeans(as.matrix(risk_contributions[sub_groups==i,])))
rect(xleft = prev0,ybottom = 0,xright = prev+prev0,ytop = risk, col=colours[i])
prev0 = prev + prev0
total = total + risk * prev
}
arrows(x0=0,x1=1,y0=mean(risk_contributions$Baseline_risk),lty=1,length=0)
}
CoOL_2_train_neural_network <- function(X_train, Y_train, X_test, Y_test, model, lr = c(1e-4,1e-5,1e-6),
epochs = 50000, patience = 100,
plot_and_evaluation_frequency = 50, IPCW = NA, L1=0.00001, spline_df=10) {
X_test = X_train
Y_test = Y_train
if (is.na(IPCW)) IPCW <- rep(1,nrow(X_train))
for (lr_set in lr) {
print(paste0("############################## Learning rate: ",lr_set," ##############################"))
performance = model$train_performance
performance_test = model$test_performance
weight_performance = model$weight_performance
baseline_risk_monitor = model$baseline_risk_monitor
par(mfrow=c(1,3));par(mar=c(3,5,3,1))
for(rounds in 1:ceiling(c(epochs/plot_and_evaluation_frequency))) {
model <- CoOL_cpp_train_network_relu(x=as.matrix(X_train),y=as.matrix(Y_train),testx=as.matrix(X_test),testy=as.matrix(Y_test),
lr = lr_set, maxepochs  = plot_and_evaluation_frequency, W1_input = model[[1]],B1_input = model[[2]],
W2_input = model[[3]],B2_input = model[[4]], IPCW = IPCW, L1=L1)
performance <- c(performance,model$train_performance)
performance_test <- c(performance_test,model$test_performance)
weight_performance <- c(weight_performance,model$weight_performance)
baseline_risk_monitor <- c(baseline_risk_monitor,model$baseline_risk_monitor)
plot(performance, type='l',yaxs='i', ylab="Mean squared error",
xlab="Epochs",main="Performance on training data set")
points(smooth.spline(performance, df = spline_df),col="red",type='l',lwd=2)
#      plot(performance_test, type='l',yaxs='i', ylab="Mean squared error",
#           xlab="Epochs",main="Performance on test data set")
plot(log(weight_performance), type='l', ylab="log of mean squared weight difference",
xlab="Epochs",main="Log mean squared weight difference")
points(smooth.spline(log(weight_performance), df = spline_df),col="red",type='l',lwd=2)
plot(baseline_risk_monitor,type='l', main="Estimated baseline risk by epoch")
abline(h=mean(Y_train),lty=2)
points(smooth.spline(baseline_risk_monitor, df = spline_df),col="red",type='l',lwd=2)
if(length(performance)-which.min(performance)>patience) break
}
model$train_performance <- c(performance)
model$test_performance <-  c(performance_test)
model$weight_performance <-  c(weight_performance)
model$baseline_risk_monitor <- c(baseline_risk_monitor)
model$epochs = epochs
}
par(mfrow=c(1,1))
return(model)
}
CoOL_6_dendrogram_and_clusters <- function(risk_contributions,number_of_subgroups=3, title = "Dendrogram") {
library(ClustGeo)
p <- cbind(risk_contributions)
p <- plyr::count(p)
pfreq <- p$freq
p <- p[,-c(ncol(p))]
p_h_c <- hclustgeo(dist(p,method = "manhattan"), wt=pfreq)
pclus <- cutree(p_h_c, number_of_subgroups)
id <- 1:nrow(r_c)
temp <- merge(cbind(id,r_c),cbind(p,pclus))
clus <- temp$pclus[order(temp$id)]
table(clus)
library(ggtree)
library(ggplot2)
library(wesanderson)
colours <- c("grey",wes_palette("Darjeeling1"))
print(ggtree(p_h_c,layout="equal_angle") +
geom_tippoint(size=sqrt(pfreq)/2, alpha=.2, color=colours[pclus])+
ggtitle(title) +
theme(plot.title = element_text(size = 15, face = "bold")))
return(clus)
}
library(SRCL) # library(CoOL)
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
set.seed(123)
data <- CoOL_0_working_example(n=10000) # use 40 000 to replicate the paper
outcome_data <- data[,1]
exposure_data <- CoOL_0_binary_encore_exposure_data(data[,-1])
# Initiate the non-negative model
model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data)
# Train the non-negative model (The model can be )
model <- CoOL_2_train_neural_network(X_train=exposure_data, Y_train=outcome_data, model=model, epochs=300)
# Model performance
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance - training data")
# Model visualisation
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model")
# AUC
CoOL_4_AUC(outcome_data,exposure_data,model)
# Risk contributions
risk_contributions <- CoOL_5_layerwise_relevance_propagation(exposure_data,model)
# Dendrogram
png("dendrogram.png",units = 'in',res=300,height = 4,width = 4)
sub_groups <- CoOL_6_dendrogram_and_clusters(risk_contributions,number_of_subgroups = 3)
dev.off()
dev.off()
library(imager)
im <- load.image("dendrogram.png")
par(mar=c(0,0,0,0))
png("dendrogram.png",units = 'in',res=300,height = 4,width = 4)
sub_groups <- CoOL_6_dendrogram_and_clusters(risk_contributions,number_of_subgroups = 3)
dev.off()
library(imager)
im <- load.image("dendrogram.png")
par(mar=c(0,0,0,0))
plot(im,axes=F)
CoOL_6_dendrogram <- function(risk_contributions,number_of_subgroups=3, title = "Dendrogram") {
library(ClustGeo)
p <- cbind(risk_contributions)
p <- plyr::count(p)
pfreq <- p$freq
p <- p[,-c(ncol(p))]
p_h_c <- hclustgeo(dist(p,method = "manhattan"), wt=pfreq)
pclus <- cutree(p_h_c, number_of_subgroups)
id <- 1:nrow(r_c)
temp <- merge(cbind(id,r_c),cbind(p,pclus))
clus <- temp$pclus[order(temp$id)]
table(clus)
library(ggtree)
library(ggplot2)
library(wesanderson)
colours <- c("grey",wes_palette("Darjeeling1"))
print(ggtree(p_h_c,layout="equal_angle") +
geom_tippoint(size=sqrt(pfreq)/2, alpha=.2, color=colours[pclus])+
ggtitle(title) +
theme(plot.title = element_text(size = 15, face = "bold")))
}
CoOL_6_sub_groups <- function(risk_contributions,number_of_subgroups=3) {
library(ClustGeo)
p <- cbind(risk_contributions)
p <- plyr::count(p)
pfreq <- p$freq
p <- p[,-c(ncol(p))]
p_h_c <- hclustgeo(dist(p,method = "manhattan"), wt=pfreq)
pclus <- cutree(p_h_c, number_of_subgroups)
id <- 1:nrow(r_c)
temp <- merge(cbind(id,r_c),cbind(p,pclus))
clus <- temp$pclus[order(temp$id)]
table(clus)
return(clus)
}
CoOL_7_prevalence_and_mean_risk_plot <- function(risk_contributions,sub_groups,title="Prevalence and mean risk\nof sub-groups") {
library(wesanderson)
par(mar=c(5,3,2,2))
colours <- c("grey",wes_palette("Darjeeling1"))
plot(0,0,type='n',xlim=c(0,1),ylim=c(0,max(pred)),xaxs='i',yaxs='i',
axes=FALSE,ylab="Risk",xlab="Prevalence",frame.plot=FALSE,main=title)
axis(1,seq(0,1,.2));axis(2,seq(0,1,.05))
rect(0,0,1,1)
prev0 = 0; total = 0
for (i in 1:max(sub_groups)) {
prev <- sum(sub_groups==i)/length(sub_groups)
risk <- sum(colMeans(as.matrix(risk_contributions[sub_groups==i,])))
rect(xleft = prev0,ybottom = 0,xright = prev+prev0,ytop = risk, col=colours[i])
prev0 = prev + prev0
total = total + risk * prev
}
arrows(x0=0,x1=1,y0=mean(risk_contributions$Baseline_risk),lty=1,length=0)
}
sub_groups <- CoOL_6_dendrogram(risk_contributions,number_of_subgroups = 3)
plot(load.image("dendrogram.png"),axes=F)
## save the dendrogram if it should be part of a combined plot
##png("dendrogram.png",units = 'in',res=300,height = 4,width = 4)
##CoOL_6_dendrogram(risk_contributions,number_of_subgroups = 3)
##dev.off()
##library(imager);im <- load.image("dendrogram.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram.png"),axes=F)
# Assign sub-groups
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = 3)
CoOL_6_sub_groups <- function(risk_contributions,number_of_subgroups=3) {
library(ClustGeo)
p <- cbind(risk_contributions)
p <- plyr::count(p)
pfreq <- p$freq
p <- p[,-c(ncol(p))]
p_h_c <- hclustgeo(dist(p,method = "manhattan"), wt=pfreq)
pclus <- cutree(p_h_c, number_of_subgroups)
id <- 1:nrow(r_c)
temp <- merge(cbind(id,r_c),cbind(p,pclus))
clus <- temp$pclus[order(temp$id)]
table(clus)
return(clus)
}
## save the dendrogram if it should be part of a combined plot
##png("dendrogram.png",units = 'in',res=300,height = 4,width = 4)
##CoOL_6_dendrogram(risk_contributions,number_of_subgroups = 3)
##dev.off()
##library(imager);im <- load.image("dendrogram.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram.png"),axes=F)
# Assign sub-groups
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = 3)
CoOL_6_dendrogram <- function(risk_contributions,number_of_subgroups=3, title = "Dendrogram") {
library(ClustGeo)
p <- cbind(risk_contributions)
p <- plyr::count(p)
pfreq <- p$freq
p <- p[,-c(ncol(p))]
p_h_c <- hclustgeo(dist(p,method = "manhattan"), wt=pfreq)
pclus <- cutree(p_h_c, number_of_subgroups)
id <- 1:nrow(risk_contributions)
temp <- merge(cbind(id,risk_contributions),cbind(p,pclus))
clus <- temp$pclus[order(temp$id)]
table(clus)
library(ggtree)
library(ggplot2)
library(wesanderson)
colours <- c("grey",wes_palette("Darjeeling1"))
print(ggtree(p_h_c,layout="equal_angle") +
geom_tippoint(size=sqrt(pfreq)/2, alpha=.2, color=colours[pclus])+
ggtitle(title) +
theme(plot.title = element_text(size = 15, face = "bold")))
}
CoOL_6_dendrogram <- function(risk_contributions,number_of_subgroups=3, title = "Dendrogram") {
library(ClustGeo)
p <- cbind(risk_contributions)
p <- plyr::count(p)
pfreq <- p$freq
p <- p[,-c(ncol(p))]
p_h_c <- hclustgeo(dist(p,method = "manhattan"), wt=pfreq)
pclus <- cutree(p_h_c, number_of_subgroups)
id <- 1:nrow(risk_contributions)
temp <- merge(cbind(id,risk_contributions),cbind(p,pclus))
clus <- temp$pclus[order(temp$id)]
table(clus)
library(ggtree)
library(ggplot2)
library(wesanderson)
colours <- c("grey",wes_palette("Darjeeling1"))
print(ggtree(p_h_c,layout="equal_angle") +
geom_tippoint(size=sqrt(pfreq)/2, alpha=.2, color=colours[pclus])+
ggtitle(title) +
theme(plot.title = element_text(size = 15, face = "bold")))
}
CoOL_6_sub_groups <- function(risk_contributions,number_of_subgroups=3) {
library(ClustGeo)
p <- cbind(risk_contributions)
p <- plyr::count(p)
pfreq <- p$freq
p <- p[,-c(ncol(p))]
p_h_c <- hclustgeo(dist(p,method = "manhattan"), wt=pfreq)
pclus <- cutree(p_h_c, number_of_subgroups)
id <- 1:nrow(risk_contributions)
temp <- merge(cbind(id,risk_contributions),cbind(p,pclus))
clus <- temp$pclus[order(temp$id)]
table(clus)
return(clus)
}
## save the dendrogram if it should be part of a combined plot
##png("dendrogram.png",units = 'in',res=300,height = 4,width = 4)
##CoOL_6_dendrogram(risk_contributions,number_of_subgroups = 3)
##dev.off()
##library(imager);im <- load.image("dendrogram.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram.png"),axes=F)
# Assign sub-groups
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = 3)
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE))
# Model performance
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance - training data")
# Model visualization
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model")
# AUC
CoOL_4_AUC(outcome_data,exposure_data,model)
# Risk contributions
risk_contributions <- CoOL_5_layerwise_relevance_propagation(exposure_data,model)
# Dendrogram
#CoOL_6_dendrogram(risk_contributions,number_of_subgroups = 3)
## save the dendrogram if it should be part of a combined plot
png("dendrogram.png",units = 'in',res=300,height = 4,width = 4)
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = 3)
dev.off()
library(imager);im <- load.image("dendrogram.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram.png"),axes=F)
# Assign sub-groups
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = 3)
# Prevalence and mean risk plot
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups)
#  Mean risk contributions by sub-groups
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups)
library(imager);im <- load.image("dendrogram.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram.png"),axes=F);par(mar=c(5,5,3,2))
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE))
# Model performance
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance - training data")
# Model visualization
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model")
# AUC
CoOL_4_AUC(outcome_data,exposure_data,model)
# Risk contributions
risk_contributions <- CoOL_5_layerwise_relevance_propagation(exposure_data,model)
# Dendrogram
#CoOL_6_dendrogram(risk_contributions,number_of_subgroups = 3)
## save the dendrogram if it should be part of a combined plot
png("dendrogram.png",units = 'in',res=300,height = 4,width = 4)
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = 3)
dev.off()
library(imager);im <- load.image("dendrogram.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram.png"),axes=F);par(mar=c(5,5,3,2))
# Assign sub-groups
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = 3)
# Prevalence and mean risk plot
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups)
#  Mean risk contributions by sub-groups
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups)
