}
Mutation_X = rep(0,n)
for (i in 1:n) {
if (Genes[i] == 1 & sample(1:0,1,prob=c(.95,.05)) ) Mutation_X[i] <- 1
}
LDL = sample(1:0,n,prob=c(0.3,0.7),replace=TRUE)
for (i in 1:n) {
if (Genes[i] == 1 & sample(1:0,1,prob=c(.15,.85)) ) LDL[i] <- 1
}
Night_shifts = sample(1:0,n,prob=c(0.2,0.8),replace=TRUE)
for (i in 1:n) {
if (Living_area[i] == 1 & sample(1:0,1,prob=c(.1,.9)) ) Night_shifts[i] <- 1
if (Low_SES[i] == 1 & sample(1:0,1,prob=c(.1,.9)) ) Night_shifts[i] <- 1
}
Air_pollution = sample(1:0,n,prob=c(0.2,0.8),replace=TRUE)
for (i in 1:n) {
if (Living_area[i] == 1 & sample(1:0,1,prob=c(.3,.7)) ) Air_pollution[i] <- 1
}
Y <-  sample(1:0,n,prob=c(0.05,0.95),replace = TRUE)
for (i in 1:n) {
if (Physically_active[i] == 0 & LDL[i] == 1 & Night_shifts[i] == 1 & sample(1:0,1,prob=c(.15,0.85)) ) {
Y[i] <- 1
}
if (Mutation_X[i] == 1 & Air_pollution[i] == 1 & sample(1:0,1,prob=c(.1,0.9)) ) {
Y[i] <- 1
}
}
#  C = rep(0,n)
data <- data.frame(Y,Physically_active,Low_SES,Mutation_X,LDL,Night_shifts,Air_pollution) #,C)
for (i in 1:ncol(data))   data[,i] <- as.numeric(data[,i])
return(data)
}
CoOL_0_common_simulation <- function(n) {
#n = 20000
A <- sample(1:0,n,prob = c(0.3,0.7),replace=TRUE)
B <- sample(1:0,n,prob = c(0.3,0.7),replace=TRUE)
C <- sample(1:0,n,prob = c(0.3,0.7),replace=TRUE)
D <- sample(1:0,n,prob = c(0.3,0.7),replace=TRUE)
E <- sample(1:0,n,prob = c(0.3,0.7),replace=TRUE)
F <- sample(1:0,n,prob = c(0.3,0.7),replace=TRUE)
U <- sample(1:0,n,prob = c(0.3,0.7),replace=TRUE)
Y <- sample(1:0,n,prob = c(0.01,0.99),replace=TRUE)
for (i in 1:n) if(U[i]==1 & sample(1:0,1,prob=c(.4,.6))) B[i] <- 1
for (i in 1:n) if(U[i]==1 & sample(1:0,1,prob=c(.3,.7))) E[i] <- 1
for (i in 1:n) if(B[i]==1 & sample(1:0,1,prob=c(.04,.96))) Y[i] <- 1
for (i in 1:n) if(E[i]==1 & sample(1:0,1,prob=c(.06,.94))) Y[i] <- 1
data <- data.frame(Y,A,B,C,D,E,F)
for (i in 1:ncol(data))   data[,i] <- as.numeric(data[,i])
return(data)
}
CoOL_0_mediation_simulation <- function(n) {
#n = 20000
A <- sample(1:0,n,prob = c(0.3,0.7),replace=TRUE)
B <- sample(1:0,n,prob = c(0.3,0.7),replace=TRUE)
C <- sample(1:0,n,prob = c(0.3,0.7),replace=TRUE)
D <- sample(1:0,n,prob = c(0.3,0.7),replace=TRUE)
E <- sample(1:0,n,prob = c(0.3,0.7),replace=TRUE)
F <- sample(1:0,n,prob = c(0.3,0.7),replace=TRUE)
Y <- sample(1:0,n,prob = c(0.01,0.99),replace=TRUE)
for (i in 1:n) if(B[i]==1 & sample(1:0,1,prob=c(.2,.8))) E[i] <- 1
for (i in 1:n) if(B[i]==1 & sample(1:0,1,prob=c(.04,.96))) Y[i] <- 1
for (i in 1:n) if(E[i]==1 & sample(1:0,1,prob=c(.06,.94))) Y[i] <- 1
data <- data.frame(Y,A,B,C,D,E,F)
for (i in 1:ncol(data))   data[,i] <- as.numeric(data[,i])
return(data)
}
CoOL_0_confounding_simulation <- function(n) {
#n = 20000
A <- sample(1:0,n,prob = c(0.3,0.7),replace=TRUE)
B <- sample(1:0,n,prob = c(0.3,0.7),replace=TRUE)
D <- sample(1:0,n,prob = c(0.3,0.7),replace=TRUE)
E <- sample(1:0,n,prob = c(0.3,0.7),replace=TRUE)
F <- sample(1:0,n,prob = c(0.3,0.7),replace=TRUE)
C <- sample(1:0,n,prob = c(0.3,0.7),replace=TRUE)
Y <- sample(1:0,n,prob = c(0.01,0.99),replace=TRUE)
for (i in 1:n) if(C[i]==1 & sample(1:0,1,prob=c(.4,.6))) B[i] <- 1
for (i in 1:n) if(C[i]==1 & sample(1:0,1,prob=c(.3,.7))) F[i] <- 1
for (i in 1:n) if(C[i]==1 & sample(1:0,1,prob=c(.15,.85))) Y[i] <- 1
data <- data.frame(Y,A,B,C,D,E,F)
for (i in 1:ncol(data))   data[,i] <- as.numeric(data[,i])
return(data)
}
CoOL_0_m_bias_simulation <- function(n) {
#  n = 20000
A <- sample(1:0,n,prob = c(0.3,0.7),replace=TRUE)
B <- sample(1:0,n,prob = c(0.3,0.7),replace=TRUE)
C <- sample(1:0,n,prob = c(0.3,0.7),replace=TRUE)
D <- sample(1:0,n,prob = c(0.3,0.7),replace=TRUE)
E <- sample(1:0,n,prob = c(0.3,0.7),replace=TRUE)
F <- sample(1:0,n,prob = c(0.3,0.7),replace=TRUE)
U <- sample(1:0,n,prob = c(0.3,0.7),replace=TRUE)
Y <- sample(1:0,n,prob = c(0.01,0.99),replace=TRUE)
for (i in 1:n) if(U[i]==1 & sample(1:0,1,prob=c(.3,.7))) A[i] <- 1
for (i in 1:n) if(B[i]==1 & sample(1:0,1,prob=c(.3,.7))) A[i] <- 1
for (i in 1:n) if(U[i]==1 & sample(1:0,1,prob=c(.3,.7))) Y[i] <- 1
data <- data.frame(Y,A,B,C,D,E,F)
for (i in 1:ncol(data))   data[,i] <- as.numeric(data[,i])
return(data)
}
set.seed(size)
data <- CoOL_0_working_example(n=40000)
data <- data[sample(1:40000,size),]
size = 20000
set.seed(size)
data <- CoOL_0_working_example(n=40000)
data <- data[sample(1:40000,size),]
CoOL_all(data, input_parameter_reg = 1e-5)
dev.off()
dev.off()
#### Simulation 10 - Robustness check data size #####
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
for (size in c(1000,2000,3000,4000,seq(5000,40000,5000))) {
set.seed(size)
data <- CoOL_0_working_example(n=40000)
data <- data[sample(1:40000,size),]
png(paste0("Data_size_",size,".png"),units = 'in',res=300,height = 8,width = 7)
CoOL_all(data, input_parameter_reg = 1e-5)
dev.off()
}
dev.off()
dev.off()
#### Simulation 10 - Robustness check data size #####
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
for (size in c(100,250,500,750,1000,2000,3000,4000,seq(5000,40000,5000))) {
set.seed(size)
data <- CoOL_0_working_example(n=40000)
data <- data[sample(1:40000,size),]
png(paste0("Data_size_",size,".png"),units = 'in',res=300,height = 8,width = 7)
CoOL_all(data, input_parameter_reg = 1e-3)
dev.off()
}
size = 1000
set.seed(size)
data <- CoOL_0_working_example(n=40000)
data <- data[sample(1:40000,size),]
library(CoOL)
outcome_data <- data[,1]
exposure_data <- data[,-1]
exposure_data <- CoOL_0_binary_encode_exposure_data(exposure_data)
model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data,hidden=hidden)
model <- CoOL_2_train_neural_network(lr = 1e-4,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=1000,patience = 200, input_parameter_reg = input_parameter_reg) # Train the non-negative model (The model can be retrained)
hidden = 5
input_parameter_reg = 1e-3
library(CoOL)
outcome_data <- data[,1]
exposure_data <- data[,-1]
exposure_data <- CoOL_0_binary_encode_exposure_data(exposure_data)
model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data,hidden=hidden)
model <- CoOL_2_train_neural_network(lr = 1e-4,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=1000,patience = 200, input_parameter_reg = input_parameter_reg) # Train the non-negative model (The model can be retrained)
model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data,hidden=hidden)
model <- CoOL_2_train_neural_network(lr = 1e-4,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=2000,patience = 200, input_parameter_reg = input_parameter_reg) # Train the non-negative model (The model can be retrained)
model <- CoOL_2_train_neural_network(lr = 1e-5,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=2000,patience = 100, input_parameter_reg = input_parameter_reg) # Train the non-negative model (The model can be retrained)
model <- CoOL_2_train_neural_network(lr = 1e-6,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=2000,patience = 50, input_parameter_reg = input_parameter_reg) # Train the non-negative model (The model can be retrained)
# Use below to combine all plots (See the note regarding the dendrogram)
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(3,3,3,3))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance - training data") # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model") # Model visualization
# Use below to combine all plots (See the note regarding the dendrogram)
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(3,3,5,3))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance - training data") # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model") # Model visualization
# Use below to combine all plots (See the note regarding the dendrogram)
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(3,3,10,3))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance - training data") # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model") # Model visualization
# Use below to combine all plots (See the note regarding the dendrogram)
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(3,3,3,3))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance - training data") # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model") # Model visualization
# Use below to combine all plots (See the note regarding the dendrogram)
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(3,3,3,3));par(oma=c(0,0,3,0))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance - training data") # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model") # Model visualization
# Use below to combine all plots (See the note regarding the dendrogram)
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(3,3,3,3));par(oma=c(0,0,3,0))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance - training data") # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model") # Model visualization
library(pROC)
mtext("test")
mtext("test",side=3)
mtext("test",side=1)
mtext("test",side=3)
mtext("test",side=3,line=3)
mtext("test",side=3,line=5)
library(imager)
CoOL_all <- function(data,sub_groups=3,exclude_below=0.01, input_parameter_reg = 1e-3,hidden=5) {
library(CoOL)
outcome_data <- data[,1]
exposure_data <- data[,-1]
exposure_data <- CoOL_0_binary_encode_exposure_data(exposure_data)
model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data,hidden=hidden)
model <- CoOL_2_train_neural_network(lr = 1e-4,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=2000,patience = 200, input_parameter_reg = input_parameter_reg) # Train the non-negative model (The model can be retrained)
model <- CoOL_2_train_neural_network(lr = 1e-5,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=2000,patience = 100, input_parameter_reg = input_parameter_reg) # Train the non-negative model (The model can be retrained)
model <- CoOL_2_train_neural_network(lr = 1e-6,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=2000,patience = 50, input_parameter_reg = input_parameter_reg) # Train the non-negative model (The model can be retrained)
# Use below to combine all plots (See the note regarding the dendrogram)
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(3,3,3,3));par(oma=c(0,0,3,0))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance - training data") # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model") # Model visualization
mtext(paste0("CoOL, phase 2\nN=",nrow(data)," events=",sum(outcome_data)),side=3,line=5)
library(pROC)
CoOL_4_AUC(outcome_data,exposure_data,model) # AUC
risk_contributions <- CoOL_5_layerwise_relevance_propagation(exposure_data,model) # Risk contributions
library(ClustGeo)
library(wesanderson)
library(ggtree)
library(ggplot2)
png("dendrogram.png",units = 'in',res=300,height = 4,width = 4)
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = sub_groups) # Dendrogram
dev.off()
library(imager);im <- load.image("dendrogram.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram.png"),axes=F);par(mar=c(5,5,3,2))
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = sub_groups) # Assign sub-groups
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups) # Prevalence and mean risk plot
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups,exposure_data = exposure_data, outcome_data = outcome_data,model=model,exclude_below = exclude_below) #  Mean risk contributions by sub-groups
}
size
CoOL_all(data)
library(CoOL)
outcome_data <- data[,1]
exposure_data <- data[,-1]
exposure_data <- CoOL_0_binary_encode_exposure_data(exposure_data)
model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data,hidden=hidden)
model <- CoOL_2_train_neural_network(lr = 1e-4,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=10000,patience = 200, input_parameter_reg = input_parameter_reg) # Train the non-negative model (The model can be retrained)
model <- CoOL_2_train_neural_network(lr = 1e-5,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=10000,patience = 100, input_parameter_reg = input_parameter_reg) # Train the non-negative model (The model can be retrained)
model <- CoOL_2_train_neural_network(lr = 1e-6,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=10000,patience = 50, input_parameter_reg = input_parameter_reg) # Train the non-negative model (The model can be retrained)
# Use below to combine all plots (See the note regarding the dendrogram)
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(3,3,3,3));par(oma=c(0,0,3,0))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance - training data") # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model") # Model visualization
mtext(paste0("CoOL, phase 2\nN=",nrow(data)," events=",sum(outcome_data)),side=3,line=5)
mtext(paste0("CoOL, phase 2 (N=",nrow(data)," events=",sum(outcome_data),")"),side=3,line=5)
# Use below to combine all plots (See the note regarding the dendrogram)
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(3,3,3,3));par(oma=c(0,0,3,0))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance - training data") # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model") # Model visualization
mtext(paste0("CoOL, phase 2 (N=",nrow(data)," events=",sum(outcome_data),")"),side=3,line=5)
mtext(paste0("CoOL - phase 2 (N=",nrow(data)," events=",sum(outcome_data),")"),side=3,line=5)
# Use below to combine all plots (See the note regarding the dendrogram)
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(3,3,3,3));par(oma=c(0,0,3,0))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance - training data") # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model") # Model visualization
mtext(paste0("CoOL - phase 2 (N=",nrow(data)," events=",sum(outcome_data),")"),side=3,line=5)
library(pROC)
CoOL_4_AUC(outcome_data,exposure_data,model) # AUC
risk_contributions <- CoOL_5_layerwise_relevance_propagation(exposure_data,model) # Risk contributions
library(ClustGeo)
library(wesanderson)
library(ggtree)
library(ggplot2)
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = sub_groups) # Dendrogram
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = sub_groups) # Assign sub-groups
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups) # Prevalence and mean risk plot
# Use below to combine all plots (See the note regarding the dendrogram)
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(3,3,3,3));par(oma=c(0,0,3,0))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance - training data") # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model") # Model visualization
mtext(paste0("CoOL - phase 2 (N=",nrow(data)," events=",sum(outcome_data),")"),side=3,line=5)
library(pROC)
CoOL_4_AUC(outcome_data,exposure_data,model) # AUC
risk_contributions <- CoOL_5_layerwise_relevance_propagation(exposure_data,model) # Risk contributions
library(ClustGeo)
library(wesanderson)
library(ggtree)
library(ggplot2)
png("dendrogram.png",units = 'in',res=300,height = 4,width = 4)
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = sub_groups) # Dendrogram
dev.off()
library(imager);im <- load.image("dendrogram.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram.png"),axes=F);par(mar=c(5,5,3,2))
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = sub_groups) # Assign sub-groups
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups) # Prevalence and mean risk plot
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups,exposure_data = exposure_data, outcome_data = outcome_data,model=model,exclude_below = exclude_below) #  Mean risk contributions by sub-groups
sub_groups =3
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(3,3,3,3));par(oma=c(0,0,3,0))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance - training data") # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model") # Model visualization
mtext(paste0("CoOL - phase 2 (N=",nrow(data)," events=",sum(outcome_data),")"),side=3,line=5)
library(pROC)
CoOL_4_AUC(outcome_data,exposure_data,model) # AUC
risk_contributions <- CoOL_5_layerwise_relevance_propagation(exposure_data,model) # Risk contributions
library(ClustGeo)
library(wesanderson)
library(ggtree)
library(ggplot2)
png("dendrogram.png",units = 'in',res=300,height = 4,width = 4)
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = sub_groups) # Dendrogram
dev.off()
library(imager);im <- load.image("dendrogram.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram.png"),axes=F);par(mar=c(5,5,3,2))
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = sub_groups) # Assign sub-groups
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups) # Prevalence and mean risk plot
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups,exposure_data = exposure_data, outcome_data = outcome_data,model=model,exclude_below = exclude_below) #  Mean risk contributions by sub-groups
exclude_below = 0.01
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(3,3,3,3));par(oma=c(0,0,3,0))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance - training data") # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model") # Model visualization
mtext(paste0("CoOL - phase 2 (N=",nrow(data)," events=",sum(outcome_data),")"),side=3,line=5)
library(pROC)
CoOL_4_AUC(outcome_data,exposure_data,model) # AUC
risk_contributions <- CoOL_5_layerwise_relevance_propagation(exposure_data,model) # Risk contributions
library(ClustGeo)
library(wesanderson)
library(ggtree)
library(ggplot2)
png("dendrogram.png",units = 'in',res=300,height = 4,width = 4)
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = sub_groups) # Dendrogram
dev.off()
library(imager);im <- load.image("dendrogram.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram.png"),axes=F);par(mar=c(5,5,3,2))
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = sub_groups) # Assign sub-groups
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups) # Prevalence and mean risk plot
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups,exposure_data = exposure_data, outcome_data = outcome_data,model=model,exclude_below = exclude_below) #  Mean risk contributions by sub-groups
# Use below to combine all plots (See the note regarding the dendrogram)
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(3,3,3,3));par(oma=c(0,0,3,0))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance - training data") # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model") # Model visualization
mtext(paste0("CoOL - phase 2 (N=",nrow(data)," events=",sum(outcome_data),")"),side=3,line=5)
library(pROC)
CoOL_4_AUC(outcome_data,exposure_data,model) # AUC
risk_contributions <- CoOL_5_layerwise_relevance_propagation(exposure_data,model) # Risk contributions
library(ClustGeo)
library(wesanderson)
library(ggtree)
library(ggplot2)
png("dendrogram.png",units = 'in',res=300,height = 4,width = 4)
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = sub_groups) # Dendrogram
sub_groups = 3
dev.off()
dev.off()
dev.off()
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = sub_groups) # Dendrogram
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(3,3,3,3));par(oma=c(0,0,3,0))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance - training data") # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model") # Model visualization
mtext(paste0("CoOL - phase 2 (N=",nrow(data)," events=",sum(outcome_data),")"),side=3,line=5)
library(pROC)
CoOL_4_AUC(outcome_data,exposure_data,model) # AUC
risk_contributions <- CoOL_5_layerwise_relevance_propagation(exposure_data,model) # Risk contributions
library(ClustGeo)
library(wesanderson)
library(ggtree)
library(ggplot2)
png("dendrogram.png",units = 'in',res=300,height = 4,width = 4)
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = sub_groups) # Dendrogram
dev.off()
library(imager);im <- load.image("dendrogram.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram.png"),axes=F);par(mar=c(5,5,3,2))
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = sub_groups) # Assign sub-groups
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups) # Prevalence and mean risk plot
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups,exposure_data = exposure_data, outcome_data = outcome_data,model=model,exclude_below = exclude_below) #  Mean risk contributions by sub-groups
size=500
set.seed(size)
data <- CoOL_0_working_example(n=40000)
data <- data[sample(1:40000,size),]
png(paste0("Data_size_",size,".png"),units = 'in',res=300,height = 8,width = 7)
CoOL_all(data)
dev.off()
dev.off()
dev.off()
CoOL_all <- function(data,sub_groups=3,exclude_below=0.01, input_parameter_reg = 1e-3,hidden=5) {
library(CoOL)
outcome_data <- data[,1]
exposure_data <- data[,-1]
exposure_data <- CoOL_0_binary_encode_exposure_data(exposure_data)
model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data,hidden=hidden)
model <- CoOL_2_train_neural_network(lr = 1e-4,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=10000,patience = 200, input_parameter_reg = input_parameter_reg) # Train the non-negative model (The model can be retrained)
model <- CoOL_2_train_neural_network(lr = 1e-5,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=10000,patience = 100, input_parameter_reg = input_parameter_reg) # Train the non-negative model (The model can be retrained)
model <- CoOL_2_train_neural_network(lr = 1e-6,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=10000,patience = 50, input_parameter_reg = input_parameter_reg) # Train the non-negative model (The model can be retrained)
# Use below to combine all plots (See the note regarding the dendrogram)
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(3,3,3,3));par(oma=c(0,0,3,0))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance - training data") # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model") # Model visualization
mtext(paste0("CoOL - phase 2 (N=",nrow(data)," events=",sum(outcome_data),")"),side=3,line=5)
library(pROC)
CoOL_4_AUC(outcome_data,exposure_data,model) # AUC
risk_contributions <- CoOL_5_layerwise_relevance_propagation(exposure_data,model) # Risk contributions
library(ClustGeo)
library(wesanderson)
library(ggtree)
library(ggplot2)
png("dendrogram.png",units = 'in',res=300,height = 4,width = 4)
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = sub_groups) # Dendrogram
dev.off()
library(imager);im <- load.image("dendrogram.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram.png"),axes=F);par(mar=c(5,5,3,2))
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = sub_groups) # Assign sub-groups
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups) # Prevalence and mean risk plot
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups,exposure_data = exposure_data, outcome_data = outcome_data,model=model,exclude_below = exclude_below) #  Mean risk contributions by sub-groups
}
library(CoOL)
dev.off()
set.seed(size)
data <- CoOL_0_working_example(n=40000)
data <- data[sample(1:40000,size),]
png(paste0("Data_size_",size,".png"),units = 'in',res=300,height = 8,width = 7)
CoOL_all(data)
dev.off()
}
#### Simulation 10 - Robustness check data size #####
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
#### Simulation 10 - Robustness check data size #####
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
dev.off()
#### Simulation 10 - Robustness check data size #####
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
set.seed(size)
data <- CoOL_0_working_example(n=40000)
data <- data[sample(1:40000,size),]
png(paste0("Data_size_",size,".png"),units = 'in',res=300,height = 8,width = 7)
CoOL_all(data)
dev.off()
reg = 0
1*10^(-c(reg))
reg = 1
1*10^(-c(reg))
#### Simulation 11 - Robustness check regularization #####
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
for (reg in c(0,1,2,3,4,5)) {
set.seed(reg)
data <- CoOL_0_working_example(n=40000)
png(paste0("Regularization_",reg,".png"),units = 'in',res=300,height = 8,width = 7)
CoOL_all(data, input_parameter_reg = 1*10^(-c(reg)))
dev.off()
}
dev.off()
dev.off()
dev.off()
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
for (reg in c(20,10,5,4,3,2,1,0)) {
set.seed(reg)
data <- CoOL_0_working_example(n=40000)
png(paste0("Regularization_",reg,".png"),units = 'in',res=300,height = 8,width = 7)
CoOL_all(data, input_parameter_reg = 1*10^(-c(reg)))
dev.off()
}
dev.off()
dev.off()
reg = 1
set.seed(reg)
data <- CoOL_0_working_example(n=40000)
sub_groups=3;exclude_below=0.01;input_parameter_reg = 1e-3;hidden=5
library(CoOL)
outcome_data <- data[,1]
exposure_data <- data[,-1]
exposure_data <- CoOL_0_binary_encode_exposure_data(exposure_data)
model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data,hidden=hidden)
model <- CoOL_2_train_neural_network(lr = 1e-4,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=10000,patience = 200, input_parameter_reg = input_parameter_reg) # Train the non-negative model (The model can be retrained)
model <- CoOL_2_train_neural_network(lr = 1e-5,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=10000,patience = 100, input_parameter_reg = input_parameter_reg) # Train the non-negative model (The model can be retrained)
model <- CoOL_2_train_neural_network(lr = 1e-6,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=10000,patience = 50, input_parameter_reg = input_parameter_reg) # Train the non-negative model (The model can be retrained)
# Use below to combine all plots (See the note regarding the dendrogram)
input_parameter_reg = 1
input_parameter_reg = 0.1
library(CoOL)
outcome_data <- data[,1]
exposure_data <- data[,-1]
exposure_data <- CoOL_0_binary_encode_exposure_data(exposure_data)
model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data,hidden=hidden)
model <- CoOL_2_train_neural_network(lr = 1e-4,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=10000,patience = 200, input_parameter_reg = input_parameter_reg) # Train the non-negative model (The model can be retrained)
model <- CoOL_2_train_neural_network(lr = 1e-5,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=10000,patience = 100, input_parameter_reg = input_parameter_reg) # Train the non-negative model (The model can be retrained)
model <- CoOL_2_train_neural_network(lr = 1e-6,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=10000,patience = 50, input_parameter_reg = input_parameter_reg) # Train the non-negative model (The model can be retrained)
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance - training data") # Model performance
# Use below to combine all plots (See the note regarding the dendrogram)
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(3,3,3,3));par(oma=c(0,0,3,0))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance - training data") # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model") # Model visualization
mtext(paste0("CoOL - phase 2 (N=",nrow(data)," events=",sum(outcome_data),")"),side=3,line=5)
library(pROC)
CoOL_4_AUC(outcome_data,exposure_data,model) # AUC
risk_contributions <- CoOL_5_layerwise_relevance_propagation(exposure_data,model) # Risk contributions
library(ClustGeo)
library(wesanderson)
library(ggtree)
library(ggplot2)
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = sub_groups) # Dendrogram
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = sub_groups) # Assign sub-groups
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups) # Prevalence and mean risk plot
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups,exposure_data = exposure_data, outcome_data = outcome_data,model=model,exclude_below = exclude_below) #  Mean risk contributions by sub-groups
reg = 1
set.seed(reg)
data <- CoOL_0_working_example(n=40000)
dev.off()
dev.off()
CoOL_all(data, input_parameter_reg = 1*10^(-c(reg)))
library(CoOL)
CoOL_all <- function(data,sub_groups=3,exclude_below=0.01, input_parameter_reg = 1e-3,hidden=5,monitor=TRUE) {
library(CoOL)
outcome_data <- data[,1]
exposure_data <- data[,-1]
exposure_data <- CoOL_0_binary_encode_exposure_data(exposure_data)
model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data,hidden=hidden)
model <- CoOL_2_train_neural_network(lr = 1e-4,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=10000,patience = 200, input_parameter_reg = input_parameter_reg,monitor=monitor) # Train the non-negative model (The model can be retrained)
model <- CoOL_2_train_neural_network(lr = 1e-5,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=10000,patience = 100, input_parameter_reg = input_parameter_reg,monitor=monitor) # Train the non-negative model (The model can be retrained)
model <- CoOL_2_train_neural_network(lr = 1e-6,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=10000,patience = 50, input_parameter_reg = input_parameter_reg,monitor=monitor) # Train the non-negative model (The model can be retrained)
# Use below to combine all plots (See the note regarding the dendrogram)
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(3,3,3,3));par(oma=c(0,0,3,0))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance - training data") # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model") # Model visualization
mtext(paste0("CoOL - phase 2 (N=",nrow(data)," events=",sum(outcome_data),")"),side=3,line=5)
library(pROC)
CoOL_4_AUC(outcome_data,exposure_data,model) # AUC
risk_contributions <- CoOL_5_layerwise_relevance_propagation(exposure_data,model) # Risk contributions
library(ClustGeo)
library(wesanderson)
library(ggtree)
library(ggplot2)
png("dendrogram.png",units = 'in',res=300,height = 4,width = 4)
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = sub_groups) # Dendrogram
dev.off()
library(imager);im <- load.image("dendrogram.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram.png"),axes=F);par(mar=c(5,5,3,2))
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = sub_groups) # Assign sub-groups
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups) # Prevalence and mean risk plot
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups,exposure_data = exposure_data, outcome_data = outcome_data,model=model,exclude_below = exclude_below) #  Mean risk contributions by sub-groups
}
set.seed(reg)
data <- CoOL_0_working_example(n=40000)
CoOL_all(data, input_parameter_reg = 1*10^(-c(reg)),monitor = FALSE)
library(CoOL)
remove.packages("CoOL", lib="~/R/win-library/4.0")
