library(CoOL)
###########################################################!
########## Causes of outcome learning #####################
###########################################################!
#if(!require("devtools")) insntall.packages("devtools")
#devtools::install_github("ekstroem/CoOL")
library(CoOL) # library(CoOL)
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
set.seed(1)
data <- CoOL_0_working_example(n=40000) # use 40 000 to replicate the paper
?CoOL_0_working_example
library(CoOL)
data <- CoOL_0_working_example(n=40000) # use 40 000 to replicate the paper
outcome_data <- data[,1]
exposure_data <- CoOL_0_binary_encore_exposure_data(data[,-1])
exposure_data <- CoOL_0_binary_encode_exposure_data(data[,-1])
model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data) # Initiate the non-negative model
model <- CoOL_2_train_neural_network(X_train=exposure_data, Y_train=outcome_data, model=model, epochs=2000) # Train the non-negative model (The model can be retrained)
model <- CoOL_2_train_neural_network(X_train=exposure_data, Y_train=outcome_data, model=model, epochs=2000) # Train the non-negative model (The model can be retrained)
library(CoOL)
###########################################################!
########## Causes of outcome learning #####################
###########################################################!
#if(!require("devtools")) insntall.packages("devtools")
#devtools::install_github("ekstroem/CoOL")
library(CoOL) # library(CoOL)
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
set.seed(1)
data <- CoOL_0_working_example(n=40000) # use 40 000 to replicate the paper
outcome_data <- data[,1]
exposure_data <- CoOL_0_binary_encode_exposure_data(data[,-1])
model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data) # Initiate the non-negative model
model <- CoOL_2_train_neural_network(X_train=exposure_data, Y_train=outcome_data, model=model, epochs=2000) # Train the non-negative model (The model can be retrained)
load("C:/Users/lvb917/Desktop/N92mort.txt")
library(readr)
N92mort <- read_table2("C:/Users/lvb917/Desktop/N92mort.txt",
col_names = FALSE)
View(N92mort)
load("C:/Users/lvb917/Desktop/X_orig.txt")
View(N92mort)
library(CoOL)
data <- CoOL_0_working_example(n=40000) # use 40 000 to replicate the paper
outcome_data <- data[,1]
exposure_data <- CoOL_0_binary_encode_exposure_data(data[,-1])
model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data) # Initiate the non-negative model
model <- CoOL_2_train_neural_network(X_train=exposure_data, Y_train=outcome_data, model=model, epochs=2000) # Train the non-negative model (The model can be retrained)
library(CoOL)
data <- CoOL_0_working_example(n=40000) # use 40 000 to replicate the paper
outcome_data <- data[,1]
exposure_data <- CoOL_0_binary_encode_exposure_data(data[,-1])
model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data) # Initiate the non-negative model
data <- CoOL_0_working_example(n=40000) # use 40 000 to replicate the paper
outcome_data <- data[,1]
exposure_data <- CoOL_0_binary_encode_exposure_data(data[,-1])
library(CoOL)
data <- CoOL_0_working_example(n=40000) # use 40 000 to replicate the paper
outcome_data <- data[,1]
exposure_data <- CoOL_0_binary_encode_exposure_data(data[,-1])
library(CoOL)
data <- CoOL_0_working_example(n=40000) # use 40 000 to replicate the paper
outcome_data <- data[,1]
exposure_data <- CoOL_0_binary_encode_exposure_data(data[,-1])
model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data) # Initiate the non-negative model
model <- CoOL_2_train_neural_network(X_train=exposure_data, Y_train=outcome_data, model=model, epochs=2000) # Train the non-negative model (The model can be retrained)
?CoOL_cpp_train_network_relu
exposure_data <- CoOL_0_binary_encode_exposure_data(data[,-1])
library(CoOL)
data <- CoOL_0_working_example(n=40000) # use 40 000 to replicate the paper
###########################################################!
########## Causes of outcome learning #####################
###########################################################!
#if(!require("devtools")) insntall.packages("devtools")
#devtools::install_github("ekstroem/CoOL")
library(CoOL) # library(CoOL)
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
set.seed(1)
data <- CoOL_0_working_example(n=40000) # use 40 000 to replicate the paper
outcome_data <- data[,1]
exposure_data <- CoOL_0_binary_encode_exposure_data(data[,-1])
model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data) # Initiate the non-negative model
model <- CoOL_2_train_neural_network(X_train=exposure_data, Y_train=outcome_data, model=model, epochs=2000) # Train the non-negative model (The model can be retrained)
CoOL_cpp_train_network_relu(x=as.matrix(X_train),y=as.matrix(Y_train),testx=as.matrix(X_test),testy=as.matrix(Y_test),
lr = lr_set, maxepochs  = plot_and_evaluation_frequency, W1_input = model[[1]],B1_input = model[[2]],
W2_input = model[[3]],B2_input = model[[4]], IPCW = IPCW, L1=L1)
data <- CoOL_0_working_example(n=40000) # use 40 000 to replicate the paper
outcome_data <- data[,1]
exposure_data <- CoOL_0_binary_encode_exposure_data(data[,-1])
X_train = exposure_data
Y_train = outcome_data
X_test = X_train
Y_test = Y_train
lr = c(1e-4,1e-5,1e-6)
patience = 100
epochs = 50000
plot_and_evaluation_frequency = 50
IPCW = NA
L1=0.00001
spline_df=10
X_test = X_train
Y_test = Y_train
if (is.na(IPCW)) IPCW <- rep(1,nrow(X_train))
lr_set = 1e-4
print(paste0("############################## Learning rate: ",lr_set," ##############################"))
performance = model$train_performance
performance_test = model$test_performance
weight_performance = model$weight_performance
baseline_risk_monitor = model$baseline_risk_monitor
par(mfrow=c(1,3));par(mar=c(3,5,3,1))
model <- CoOL_cpp_train_network_relu(x=as.matrix(X_train),y=as.matrix(Y_train),testx=as.matrix(X_test),testy=as.matrix(Y_test),
lr = lr_set, maxepochs  = plot_and_evaluation_frequency, W1_input = model[[1]],B1_input = model[[2]],
W2_input = model[[3]],B2_input = model[[4]], IPCW = IPCW, L1=L1)
library(CoOL)
data <- CoOL_0_working_example(n=40000) # use 40 000 to replicate the paper
outcome_data <- data[,1]
exposure_data <- CoOL_0_binary_encode_exposure_data(data[,-1])
model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data) # Initiate the non-negative model
model <- CoOL_2_train_neural_network(X_train=exposure_data, Y_train=outcome_data, model=model, epochs=2000) # Train the non-negative model (The model can be retrained)
