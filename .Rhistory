CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups,outcome_data = outcome_data,exposure_data = exposure_data, model=model,exclude_below = 0.01) #  Mean risk contributions by sub-groups
png("main.png",units = 'in',res=300,height = 8,width = 7)
par(oma = c(1,1,1,1))
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(3,3,3,3))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="A) Performance during training\n\n",ylim=quantile(model$train_performance,c(0,.975))) # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "B) Model connection weights\nand intercepts") # Model visualization
CoOL_4_AUC(outcome_data,exposure_data,model, title = "C) Receiver operating\ncharacteristic curve") # AUC
library(imager);im <- load.image("dendrogram3.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram3.png"),axes=F);par(mar=c(5,5,3,2))
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = 3) # Assign sub-groups
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups,title = "E) Prevalence and mean risk of sub-groups") # Prevalence and mean risk plot
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups,outcome_data = outcome_data,exposure_data = exposure_data, model=model,exclude_below = 0.01) #  Mean risk contributions by sub-groups
dev.off()
png("main.png",units = 'in',res=300,height = 8,width = 8)
par(oma = c(1,1,1,1))
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(3,3,3,3))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="A) Performance during training\n\n",ylim=quantile(model$train_performance,c(0,.975))) # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "B) Model connection weights\nand intercepts") # Model visualization
CoOL_4_AUC(outcome_data,exposure_data,model, title = "C) Receiver operating\ncharacteristic curve") # AUC
library(imager);im <- load.image("dendrogram3.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram3.png"),axes=F);par(mar=c(5,5,3,2))
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = 3) # Assign sub-groups
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups,title = "E) Prevalence and mean risk of sub-groups") # Prevalence and mean risk plot
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups,outcome_data = outcome_data,exposure_data = exposure_data, model=model,exclude_below = 0.01) #  Mean risk contributions by sub-groups
dev.off()
par(oma = c(1,1,1,1),mar=c(4,4,3,1))
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(3,3,3,3))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="A) Performance during training\n\n",ylim=quantile(model$train_performance,c(0,.975))) # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "B) Model connection weights\nand intercepts") # Model visualization
par(oma = c(1,1,1,1))
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(4,4,3,3))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="A) Performance during training\n\n",ylim=quantile(model$train_performance,c(0,.975))) # Model performance
png("main.png",units = 'in',res=300,height = 8,width = 8)
par(oma = c(1,1,1,1))
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(4,4,3,3))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="A) Performance during training\n\n",ylim=quantile(model$train_performance,c(0,.975))) # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "B) Model connection weights\nand intercepts") # Model visualization
CoOL_4_AUC(outcome_data,exposure_data,model, title = "C) Receiver operating\ncharacteristic curve") # AUC
library(imager);im <- load.image("dendrogram3.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram3.png"),axes=F);par(mar=c(5,5,3,2))
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = 3) # Assign sub-groups
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups,title = "E) Prevalence and mean risk of sub-groups") # Prevalence and mean risk plot
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups,outcome_data = outcome_data,exposure_data = exposure_data, model=model,exclude_below = 0.01) #  Mean risk contributions by sub-groups
dev.off()
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
library(CoOL)
set.seed(1)
data <- CoOL_0_working_example(n=40000) # use 40 000 to replicate the paper
outcome_data <- data[,1]
exposure_data <- data[,-1]
exposure_data <- CoOL_0_binary_encode_exposure_data(exposure_data)
model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data,hidden=10)
model <- CoOL_2_train_neural_network(lr = 1e-4,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=1000,patience = 200, input_parameter_reg = 1e-3) # Train the non-negative model (The model can be retrained)
model <- CoOL_2_train_neural_network(lr = 1e-5,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=1000,patience = 100, input_parameter_reg = 1e-3) # Train the non-negative model (The model can be retrained)
model <- CoOL_2_train_neural_network(lr = 1e-6,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=1000,patience = 50, input_parameter_reg = 1e-3) # Train the non-negative model (The model can be retrained)
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
risk_contributions <- CoOL_5_layerwise_relevance_propagation(exposure_data,model) # Risk contributions
png("dendrogram3.png",units = 'in',res=300,height = 4,width = 4)
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = 3, title = "D) Dendrogram with 3 sub-groups") # Dendrogram
dev.off()
png("main.png",units = 'in',res=300,height = 8,width = 8)
par(oma = c(1,1,1,1))
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(4,4,3,3))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="A) Performance during training\n\n",ylim=quantile(model$train_performance,c(0,.975))) # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "B) Model connection weights\nand intercepts") # Model visualization
CoOL_4_AUC(outcome_data,exposure_data,model, title = "C) Receiver operating\ncharacteristic curve") # AUC
library(imager);im <- load.image("dendrogram3.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram3.png"),axes=F);par(mar=c(5,5,3,2))
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = 3) # Assign sub-groups
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups,title = "E) Prevalence and mean risk of sub-groups") # Prevalence and mean risk plot
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups,outcome_data = outcome_data,exposure_data = exposure_data, model=model,exclude_below = 0.01) #  Mean risk contributions by sub-groups
dev.off()
#### FIGURE 4 #######
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
library(CoOL)
set.seed(1)
data <- CoOL_0_working_example(n=40000) # use 40 000 to replicate the paper
outcome_data <- data[,1]
exposure_data <- data[,-1]
exposure_data <- CoOL_0_binary_encode_exposure_data(exposure_data)
model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data,hidden=10)
model <- CoOL_2_train_neural_network(lr = 1e-4,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=1000,patience = 200, input_parameter_reg = 1e-4) # Train the non-negative model (The model can be retrained)
model <- CoOL_2_train_neural_network(lr = 1e-5,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=1000,patience = 100, input_parameter_reg = 1e-4) # Train the non-negative model (The model can be retrained)
model <- CoOL_2_train_neural_network(lr = 1e-6,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=1000,patience = 50, input_parameter_reg = 1e-4) # Train the non-negative model (The model can be retrained)
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
risk_contributions <- CoOL_5_layerwise_relevance_propagation(exposure_data,model) # Risk contributions
png("dendrogram3.png",units = 'in',res=300,height = 4,width = 4)
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = 3, title = "D) Dendrogram with 3 sub-groups") # Dendrogram
dev.off()
png("main.png",units = 'in',res=300,height = 8,width = 8)
par(oma = c(1,1,1,1))
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(4,4,3,3))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="A) Performance during training\n\n",ylim=quantile(model$train_performance,c(0,.975))) # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "B) Model connection weights\nand intercepts") # Model visualization
CoOL_4_AUC(outcome_data,exposure_data,model, title = "C) Receiver operating\ncharacteristic curve") # AUC
library(imager);im <- load.image("dendrogram3.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram3.png"),axes=F);par(mar=c(5,5,3,2))
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = 3) # Assign sub-groups
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups,title = "E) Prevalence and mean risk of sub-groups") # Prevalence and mean risk plot
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups,outcome_data = outcome_data,exposure_data = exposure_data, model=model,exclude_below = 0.01) #  Mean risk contributions by sub-groups
dev.off()
#### FIGURE 4 #######
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
library(CoOL)
set.seed(1)
data <- CoOL_0_working_example(n=10000) # use 40 000 to replicate the paper
outcome_data <- data[,1]
exposure_data <- data[,-1]
exposure_data <- CoOL_0_binary_encode_exposure_data(exposure_data)
model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data,hidden=10)
model <- CoOL_2_train_neural_network(lr = 1e-4,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=1000,patience = 200, input_parameter_reg = 1e-4) # Train the non-negative model (The model can be retrained)
model <- CoOL_2_train_neural_network(lr = 1e-5,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=1000,patience = 100, input_parameter_reg = 1e-4) # Train the non-negative model (The model can be retrained)
model <- CoOL_2_train_neural_network(lr = 1e-6,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=1000,patience = 50, input_parameter_reg = 1e-4) # Train the non-negative model (The model can be retrained)
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
risk_contributions <- CoOL_5_layerwise_relevance_propagation(exposure_data,model) # Risk contributions
png("dendrogram3.png",units = 'in',res=300,height = 4,width = 4)
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = 3, title = "D) Dendrogram with 3 sub-groups") # Dendrogram
dev.off()
png("main.png",units = 'in',res=300,height = 8,width = 8)
par(oma = c(1,1,1,1))
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(4,4,3,3))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="A) Performance during training\n\n",ylim=quantile(model$train_performance,c(0,.975))) # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "B) Model connection weights\nand intercepts") # Model visualization
CoOL_4_AUC(outcome_data,exposure_data,model, title = "C) Receiver operating\ncharacteristic curve") # AUC
library(imager);im <- load.image("dendrogram3.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram3.png"),axes=F);par(mar=c(5,5,3,2))
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = 3) # Assign sub-groups
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups,title = "E) Prevalence and mean risk of sub-groups") # Prevalence and mean risk plot
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups,outcome_data = outcome_data,exposure_data = exposure_data, model=model,exclude_below = 0.01) #  Mean risk contributions by sub-groups
dev.off()
data <- CoOL_0_working_example(n=10000)
CoOL_default(data)
par(oma = c(1,1,3,1))
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(4,4,3,3))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="A) Performance during training\n\n",ylim=quantile(model$train_performance,c(0,.975))) # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "B) Model connection weights\nand intercepts") # Model visualization
mtext(paste0("CoOL (N=",nrow(data)," events=",sum(outcome_data),")"),side=3,line=5)
CoOL_4_AUC(outcome_data,exposure_data,model, title = "C) Receiver operating\ncharacteristic curve") # AUC
library(imager);im <- load.image("dendrogram3.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram3.png"),axes=F);par(mar=c(5,5,3,2))
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = 3) # Assign sub-groups
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups,title = "E) Prevalence and mean risk of sub-groups") # Prevalence and mean risk plot
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups,outcome_data = outcome_data,exposure_data = exposure_data, model=model,exclude_below = 0.01) #  Mean risk contributions by sub-groups
png("main.png",units = 'in',res=300,height = 8,width = 8)
par(oma = c(1,1,3,1))
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(4,4,3,3))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="A) Performance during training\n\n",ylim=quantile(model$train_performance,c(0,.975))) # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "B) Model connection weights\nand intercepts") # Model visualization
mtext(paste0("CoOL (N=",nrow(data)," events=",sum(outcome_data),")"),side=3,line=5)
CoOL_4_AUC(outcome_data,exposure_data,model, title = "C) Receiver operating\ncharacteristic curve") # AUC
library(imager);im <- load.image("dendrogram3.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram3.png"),axes=F);par(mar=c(5,5,3,2))
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = 3) # Assign sub-groups
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups,title = "E) Prevalence and mean risk of sub-groups") # Prevalence and mean risk plot
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups,outcome_data = outcome_data,exposure_data = exposure_data, model=model,exclude_below = 0.01) #  Mean risk contributions by sub-groups
dev.off()
par(oma = c(1,1,3,1))
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(4,4,3,3))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="A) Performance during training\n\n",ylim=quantile(model$train_performance,c(0,.975))) # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "B) Model connection weights\nand intercepts") # Model visualization
mtext(paste0("CoOL (N=",format(nrow(data),big.mark = ",")," events=",sum(outcome_data),")"),side=3,line=5)
CoOL_4_AUC(outcome_data,exposure_data,model, title = "C) Receiver operating\ncharacteristic curve") # AUC
library(imager);im <- load.image("dendrogram3.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram3.png"),axes=F);par(mar=c(5,5,3,2))
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = 3) # Assign sub-groups
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups,title = "E) Prevalence and mean risk of sub-groups") # Prevalence and mean risk plot
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups,outcome_data = outcome_data,exposure_data = exposure_data, model=model,exclude_below = 0.01) #  Mean risk contributions by sub-groups
png("main.png",units = 'in',res=300,height = 8,width = 8)
par(oma = c(1,1,3,1))
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(4,4,3,3))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="A) Performance during training\n\n",ylim=quantile(model$train_performance,c(0,.975))) # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "B) Model connection weights\nand intercepts") # Model visualization
mtext(paste0("CoOL (N=",format(nrow(data),big.mark = ",")," events=",format(sum(outcome_data),big.mark = ","),")"),side=3,line=5)
CoOL_4_AUC(outcome_data,exposure_data,model, title = "C) Receiver operating\ncharacteristic curve") # AUC
library(imager);im <- load.image("dendrogram3.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram3.png"),axes=F);par(mar=c(5,5,3,2))
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = 3) # Assign sub-groups
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups,title = "E) Prevalence and mean risk of sub-groups") # Prevalence and mean risk plot
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups,outcome_data = outcome_data,exposure_data = exposure_data, model=model,exclude_below = 0.01) #  Mean risk contributions by sub-groups
dev.off()
png("main.png",units = 'in',res=300,height = 8,width = 8)
par(oma = c(0,0,3,0))
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(4,4,3,3))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="A) Performance during training\n\n",ylim=quantile(model$train_performance,c(0,.975))) # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "B) Model connection weights\nand intercepts") # Model visualization
mtext(paste0("CoOL (N=",format(nrow(data),big.mark = ",")," events=",format(sum(outcome_data),big.mark = ","),")"),side=3,line=5)
CoOL_4_AUC(outcome_data,exposure_data,model, title = "C) Receiver operating\ncharacteristic curve") # AUC
library(imager);im <- load.image("dendrogram3.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram3.png"),axes=F);par(mar=c(5,5,3,2))
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = 3) # Assign sub-groups
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups,title = "E) Prevalence and mean risk of sub-groups") # Prevalence and mean risk plot
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups,outcome_data = outcome_data,exposure_data = exposure_data, model=model,exclude_below = 0.01) #  Mean risk contributions by sub-groups
dev.off()
png("main.png",units = 'in',res=300,height = 8,width = 8)
par(oma = c(0,0,3,0))
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(4,4,3,3))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="A) Performance during training\n\n",ylim=quantile(model$train_performance,c(0,.975))) # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "B) Model connection weights\nand intercepts") # Model visualization
mtext(paste0("CoOL (n=",format(nrow(data),big.mark = ",")," events=",format(sum(outcome_data),big.mark = ","),")"),side=3,line=5)
CoOL_4_AUC(outcome_data,exposure_data,model, title = "C) Receiver operating\ncharacteristic curve") # AUC
library(imager);im <- load.image("dendrogram3.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram3.png"),axes=F);par(mar=c(5,5,3,2))
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = 3) # Assign sub-groups
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups,title = "E) Prevalence and mean risk of sub-groups") # Prevalence and mean risk plot
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups,outcome_data = outcome_data,exposure_data = exposure_data, model=model,exclude_below = 0.01) #  Mean risk contributions by sub-groups
dev.off()
library(CoOL)
library(survival)
?Surv
library(survival)
n = 10000
id = 1:n
t = rnorm(n,10)
interval = rnorm(n,0.2,0.2)
interval = ifelse(interval > 0.49,0.49,interval)
interval = ifelse(interval < -0.49,-0.49,interval)
hist(interval)
d = NA
for (i in 1:n) {
risk <- interval[i] + .5
d[i] = sample(1:0,n,prob=c(risk,1-risk),replace=T)
}
t = ifelse(d == 0, t + 10, t)
table(d)
reform <- ifelse(interval <0,0,1)
#not adjusted
fit <- coxph(Surv(t,d) ~ strata(reform) + cluster(id))
fit2 <- survfit(fit)
plot(fit2,col=1:2)
n = 10000
id = 1:n
t = rnorm(n,10)
interval = rnorm(n,0.2,0.2)
interval = ifelse(interval > 0.49,0.49,interval)
interval = ifelse(interval < -0.49,-0.49,interval)
hist(interval)
d = NA
for (i in 1:n) {
risk <- interval[i] + .5
d[i] = sample(1:0,n,prob=c(risk,1-risk),replace=T)
}
t = ifelse(d == 0, t + 10, t)
table(d)
reform <- ifelse(interval <0,0,1)
#not adjusted
fit <- coxph(Surv(t,d) ~ strata(reform) + cluster(id))
fit2 <- survfit(fit)
plot(fit2,col=1:2)
#not adjusted
fit0 <- Surv(t,d)
fit0
fit <- coxph(Surv(t,d))
fit2 <- survfit(fit)
fit <- coxph(Surv(t,d) ~ 1)
fit2 <- survfit(fit)
View(fit2)
View(fit)
summary(fit)
fit2 <- survfit(fit)
plot(fit2,col=1:2)
fit <- coxph(Surv(t,d) ~ strata(as.factor(reform)))
summary(fit)
fit2 <- survfit(fit)
plot(fit2,col=1)
plot(fit2$time)
fit2$n
sum(fit2$n)
fit2$n[1]
tid <- fit2$time[1:fit2$n[1]]
nrisk <- fit2$n.risk[1:fit2$n[1]]
plot(tid, nrisk)
plot(fit2,col=1)
plot(tid, nrisk)
plot(fit2,col=1)
plot(tid, nrisk)
cbind(tid,nrisk,nrisk>=100)
View(cbind(tid,nrisk,nrisk>=100))
max(tid[nrisk>=100 == 1])
max(tid[nrisk>=100])
library(survival)
n = 10000
id = 1:n
t = rnorm(n,10)
interval = rnorm(n,0.2,0.2)
interval = ifelse(interval > 0.49,0.49,interval)
interval = ifelse(interval < -0.49,-0.49,interval)
hist(interval)
d = NA
for (i in 1:n) {
risk <- interval[i] + .5
d[i] = sample(1:0,n,prob=c(risk,1-risk),replace=T)
}
t = ifelse(d == 0, t + 10, t)
table(d)
reform <- ifelse(interval <0,0,1)
#not adjusted
fit <- coxph(Surv(t,d) ~ strata(reform) + cluster(id))
fit2 <- survfit(fit)
plot(fit2,col=1:2)
# adjusted to covariate = mean value
fit <- coxph(Surv(t,d) ~ interval + strata(reform) + cluster(id))
fit2 <- survfit(fit)
plot(fit2,col=1:2)
# adjusted to covariate = zero
fit <- coxph(Surv(t,d) ~ interval + strata(reform) + cluster(id))
data_new <- data.frame(interval=0)
fit2 <- survfit(fit,newdata = data_new)
plot(fit2,col=1:2)
# we extract the survival functions for each intervention group
fit2_1 <- data.frame(time = fit2$time[1:fit2$strata[1]],
surv = fit2$surv[1:fit2$strata[1]],
lower = fit2$lower[1:fit2$strata[1]],
upper = fit2$upper[1:fit2$strata[1]])
fit2_2 <- data.frame(time = fit2$time[c(fit2$strata[1]+1):fit2$strata[2]],
surv = fit2$surv[c(fit2$strata[1]+1):fit2$strata[2]],
lower = fit2$lower[c(fit2$strata[1]+1):fit2$strata[2]],
upper = fit2$upper[c(fit2$strata[1]+1):fit2$strata[2]])
# risk difference at 10 years of follow up (we find the se on a log scale and simulate the difference with n = many)
p_1<-fit2_1$surv[which.max(fit2_1$time[fit2_1$time<10])]
l_1<-fit2_1$lower[which.max(fit2_1$time[fit2_1$time<10])]
u_1<-fit2_1$upper[which.max(fit2_1$time[fit2_1$time<10])]
log(p_1)-log(l_1)
log(u_1)-log(p_1)
se_1 <- mean(c(log(p_1)-log(l_1),log(u_1)-log(p_1))) / 1.96
hist(exp(rnorm(1000,log(p_1),se_1)));abline(v=c(p_1,l_1,u_1),lwd=3)
p_2<-fit2_2$surv[which.max(fit2_2$time[fit2_2$time<10])]
l_2<-fit2_2$lower[which.max(fit2_2$time[fit2_2$time<10])]
u_2<-fit2_2$upper[which.max(fit2_2$time[fit2_2$time<10])]
log(p_2)-log(l_2)
log(u_2)-log(p_2)
se_2 <- mean(c(log(p_2)-log(l_2),log(u_2)-log(p_2))) / 1.96
hist(exp(rnorm(1000,log(p_2),se_2)));abline(v=c(p_2,l_2,u_2),lwd=3)
hist(exp(rnorm(1000,log(p_2),se_2))-exp(rnorm(1000,log(p_1),se_1)),main="risk difference")
(ests<-quantile(exp(rnorm(1000,log(p_2),se_2))-exp(rnorm(1000,log(p_1),se_1)),c(0.025,0.5,0.975))) # dif, 95%CI
ests <- round(ests,3)
plot(fit2,col=1:2)
abline(v=10)
text(10,0.8,paste0("Risk dif=",ests[2]," (",ests[1],"-",ests[3],")"),pos=4)
makstid_gr_1 <- max(tid[nrisk>=100])
fit2$n[1]
fit2$n[1]+1
sum(fit2$n)
# anden gruppe
tid <- fit2$time[c(fit2$n[1]+1):sum(fit2$n)]
tid
plot(tid)
fit2$time
plot( fit2$time)
# anden gruppe
tid <- fit2$time[c(fit2$n[1]+1):sum(fit2$n)]
nrisk <- fit2$n.risk[c(fit2$n[1]+1):sum(fit2$n)]
plot(tid, nrisk)
makstid_gr_2 <- max(tid[nrisk>=100])
cbind(makstid_gr_1,makstid_gr_2)
View(cbind(tid,nrisk,nrisk>=100))
makstid_gr_2 <- max(tid[nrisk>=100],na.rm = T)
makstid_gr_2
cbind(makstid_gr_1,makstid_gr_2)
min(cbind(makstid_gr_1,makstid_gr_2))
##### TUTORIAL ######
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
library(CoOL)
set.seed(1)
data <- CoOL_0_working_example(n=10000)
outcome_data <- data[,1]
exposure_data <- data[,-1]
exposure_data <- CoOL_0_binary_encode_exposure_data(exposure_data)
model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data,hidden=5)
model <- CoOL_2_train_neural_network(lr = 1e-4,X_train=exposure_data, Y_train=outcome_data)
library(CoOL)
set.seed(1)
data <- CoOL_0_working_example(n=10000)
outcome_data <- data[,1]
exposure_data <- data[,-1]
exposure_data <- CoOL_0_binary_encode_exposure_data(exposure_data)
model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data)
model <- CoOL_2_train_neural_network(X_train=exposure_data, Y_train=outcome_data, model=model)
par(mfrow=c(1,3))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="A) Performance during training\n\n",ylim=quantile(model$train_performance,c(0,.975))) # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "B) Model connection weights\nand intercepts") # Model visualization
library(pROC)
CoOL_4_AUC(outcome_data,exposure_data,model, title = "C) Receiver operating\ncharacteristic curve") # AUC
# Plot these
risk_contributions <- CoOL_5_layerwise_relevance_propagation(exposure_data,model) # Risk contributions
library(ClustGeo)
library(wesanderson)
library(ggtree)
library(ggplot2)
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = 2, title = "Colored for 2 sub-groups") # Dendrogram
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = 3) # Assign sub-groups
par(mfrow=c(2,1))
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups,title = "E) Prevalence and mean risk of sub-groups") # Prevalence and mean risk plot
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups,outcome_data = outcome_data,exposure_data = exposure_data, model=model,exclude_below = 0.01) #  Mean risk contributions by sub-groups
par(mfrow=c(1,3))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="A) Performance during training\n\n",ylim=quantile(model$train_performance,c(0,.975))) # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "B) Model connection weights\nand intercepts") # Model visualization
library(pROC)
CoOL_4_AUC(outcome_data,exposure_data,model, title = "C) Receiver operating\ncharacteristic curve") # AUC
# Plot these
risk_contributions <- CoOL_5_layerwise_relevance_propagation(exposure_data,model) # Risk contributions
par(mfrow=c(1,3),mar=c(4,4,3,1))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="A) Performance during training\n\n",ylim=quantile(model$train_performance,c(0,.975))) # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "B) Model connection weights\nand intercepts") # Model visualization
par(mfrow=c(1,3),mar=c(5,5,4,1))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="A) Performance during training\n\n",ylim=quantile(model$train_performance,c(0,.975))) # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "B) Model connection weights\nand intercepts") # Model visualization
library(pROC)
CoOL_4_AUC(outcome_data,exposure_data,model, title = "C) Receiver operating\ncharacteristic curve") # AUC
par(mfrow=c(1,3),mar=c(5,5,5,1))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="A) Performance during training\n\n",ylim=quantile(model$train_performance,c(0,.975))) # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "B) Model connection weights\nand intercepts") # Model visualization
library(pROC)
CoOL_4_AUC(outcome_data,exposure_data,model, title = "C) Receiver operating\ncharacteristic curve") # AUC
par(mfrow=c(1,3),mar=c(5,5,6,1))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="A) Performance during training\n\n",ylim=quantile(model$train_performance,c(0,.975))) # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "B) Model connection weights\nand intercepts") # Model visualization
library(pROC)
CoOL_4_AUC(outcome_data,exposure_data,model, title = "C) Receiver operating\ncharacteristic curve") # AUC
CoOL_3_plot_neural_network <- function(model,names,arrow_size = NA, title = "Model connection weights and intercepts") {
par(mar=c(0,0,3,0))
if (is.na(arrow_size)) arrow_size = 5/max(model[[1]])
plot(0,0,type='n',xlim=c(0,4),ylim=c(-max(nrow(model[[1]]),nrow(model[[3]]))-1,0),axes=FALSE,ylab="",xlab="",main=title)
#abline(h=0)
#points(rep(1,nrow(model[[1]])),-c(1:nrow(model[[1]])),cex=10)
#points(rep(2,ncol(model[[1]])),-c(1:ncol(model[[1]])),cex=10)
#points(3,-(ncol(model[[1]])+1)/2,cex=10)
# Static edges first in grey
for (g in 1:nrow(model[[3]])) {
arrows(x0=2,x1=3,y0=-g,y1= -(ncol(model[[1]])+1)/2,lwd=abs(model[[3]][g,1])*5,col=ifelse(model[[3]][g,1]>=0,"lightgrey","red"),length=0)
#   text(2,-g,round(model[[3]][g,1],2),pos=3)
}
# Trained edges
for (g in 1:nrow(model[[1]])) {
for (h in 1:ncol(model[[1]])) {
arrows(x0=1,x1=2,y0=-g,y1=-h,lwd=abs(model[[1]][g,h])*arrow_size,col=ifelse(model[[1]][g,h]>=0,"dodgerblue","red"),length=0)
#      text(1,-g,round(model[[1]][g,h],2),pos=3)
}
}
for (i in 1:nrow(model[[1]])) {
text(rep(1,nrow(model[[1]]))[i],-c(1:nrow(model[[1]]))[i],names[i],pos=2)
}
text(rep(2,ncol(model[[1]])),-c(1:ncol(model[[1]])),paste0("a=",round(model[[2]][1,],2)),pos=3)
text(3,-(ncol(model[[1]])+1)/2,bquote(R^"b+"==.(round(model[[4]][1,1],2))),pos=1)
par(mar=c(5.1,4.1,4.1,2.1))
#  points(3,-(ncol(model[[1]])+1)/2+1,cex=10)
#  arrows(x0=3,x1=3,y0=-(ncol(model[[1]])+1)/2+1,y1= -(ncol(model[[1]])+1)/2,lwd=abs(model[[5]][1,1])*arrow_size,col=ifelse(model[[5]][1,1]>0,"green","white"),length=0)
}
par(mfrow=c(1,3),mar=c(5,5,6,1))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="A) Performance during training\n\n",ylim=quantile(model$train_performance,c(0,.975))) # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "B) Model connection weights\nand intercepts") # Model visualization
library(pROC)
CoOL_4_AUC(outcome_data,exposure_data,model, title = "C) Receiver operating\ncharacteristic curve") # AUC
png("dendrogram2.png",units = 'in',res=300,height = 4,width = 4)
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = 2, title = "Colored for 2 sub-groups") # Dendrogram
dev.off()
png("dendrogram3.png",units = 'in',res=300,height = 4,width = 4)
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = 3, title = "Colored for 3 sub-groups") # Dendrogram
dev.off()
png("dendrogram4.png",units = 'in',res=300,height = 4,width = 4)
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = 6, title = "Colored for 4 sub-groups") # Dendrogram
dev.off()
library(imager);im <- load.image("dendrogram2.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram2.png"),axes=F);par(mar=c(5,5,3,2))
library(imager);im <- load.image("dendrogram3.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram3.png"),axes=F);par(mar=c(5,5,3,2))
library(imager);im <- load.image("dendrogram4.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram4.png"),axes=F);par(mar=c(5,5,3,2))
par(mfrow=c(2,1))
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups,title = "E) Prevalence and mean risk of sub-groups") # Prevalence and mean risk plot
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups,outcome_data = outcome_data,exposure_data = exposure_data, model=model,exclude_below = 0.01) #  Mean risk contributions by sub-groups
par(mfrow=c(2,1))
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups,title = "Prevalence and mean risk of sub-groups") # Prevalence and mean risk plot
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups,outcome_data = outcome_data,exposure_data = exposure_data, model=model,exclude_below = 0.01) #  Mean risk contributions by sub-groups
par(mfrow=c(1,3),mar=c(5,5,6,1))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance during training\n\n",ylim=quantile(model$train_performance,c(0,.975))) # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model connection weights\nand intercepts") # Model visualization
library(pROC)
CoOL_4_AUC(outcome_data,exposure_data,model, title = "Receiver operating\ncharacteristic curve") # AUC
?CoOL_default
data <- CoOL_0_complex_simulation(n=10000)
CoOL_default(data,input_parameter_reg = 1e-4)
CoOL_default(data) #,input_parameter_reg = 1e-4)
CoOL_default(data,input_parameter_reg = 1e-5)
data <- CoOL_0_complex_simulation(n=10000)
CoOL_default(data,input_parameter_reg = 1e-4)
#### Simulation 3 - Complex example #####
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
for (repeated in 1:10) {
set.seed(repeated)
data <- CoOL_0_complex_simulation(n=50000)
png(paste0("Complex_",repeated,".png"),units = 'in',res=300,height = 8,width = 12)
CoOL_default(data,input_parameter_reg = 1e-4)
dev.off()
}
dev.off()
dev.off()
dev.off()
#### Simulation 4 - Common example #####
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
for (repeated in 1:10) {
set.seed(repeated)
data <- CoOL_0_common_simulation(n=10000)
png(paste0("Common_",repeated,".png"),units = 'in',res=300,height = 8,width = 14)
CoOL_default(data,sub_groups = 4, exclude_below = 0.01)
dev.off()
}
dev.off()
dev.off()
dev.off()
#### Simulation 3 - Complex example #####
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
for (repeated in 1:10) {
set.seed(repeated)
data <- CoOL_0_complex_simulation(n=50000)
png(paste0("Complex_",repeated,".png"),units = 'in',res=300,height = 8,width = 12)
CoOL_default(data,input_parameter_reg = 1e-4)
dev.off()
}
#### Simulation 8 - Robustness check data size #####
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
for (size in c(100,250,500,750,1000,2000,3000,4000,seq(5000,40000,5000))) {
set.seed(size)
data <- CoOL_0_working_example(n=size)
png(paste0("Data_size_",size,".png"),units = 'in',res=300,height = 8,width = 8)
CoOL_default(data)
dev.off()
}
