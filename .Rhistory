document()
?theme
library(ggtree)
?theme
?ggtitle
?geom_tippoint
?element_text
shap_model <- function(data,model) {
data_tab <- data.frame(age=c(0,0,1,1),sex=c(0,1,0,1),age_attri=NA,sex_attri=NA)
data_tab
for (r in 1:nrow(data_tab)) {
for (first_var in 1:2) {
second_var = 4 - first_var
first_var_data <- c(3,5)[first_var]
second_var_data <- c(3,5)[4-first_var]
data_tab[r,first_var+2] <- mean(c(mean(predict(model,as.matrix(data[data[,first_var_data] == data_tab[r,first_var],-1]))) - mean(predict(model,as.matrix(data[,-1]))),
mean(predict(model,as.matrix(data[data[,first_var_data] == data_tab[r,first_var] &
data[,second_var_data] == data_tab[r,second_var],-1])))-
mean(predict(model,as.matrix(data[data[,second_var_data] == data_tab[r,second_var],-1])))))
}}
return(data_tab)
}
shap_cool <- function(data,model=model_CoOL) {
data_tab <- data.frame(age=c(0,0,1,1),sex=c(0,1,0,1),age_attri=NA,sex_attri=NA)
data_tab
for (r in 1:nrow(data_tab)) {
for (first_var in 1:2) {
second_var = 3 - first_var
first_var_data <- c(3,5)[first_var]
second_var_data <- c(3,5)[3-first_var]
data_tab[r,first_var+2] <- mean(c(mean(CoOL_4_predict_risks(as.matrix(data[data[,first_var_data] == data_tab[r,first_var],-1]),model)) - mean(CoOL_4_predict_risks(as.matrix(data[,-1]),model)),
mean(CoOL_4_predict_risks(as.matrix(data[data[,first_var_data] == data_tab[r,first_var] &
data[,second_var_data] == data_tab[r,second_var],-1]),model))-
mean(CoOL_4_predict_risks(as.matrix(data[data[,second_var_data] == data_tab[r,second_var],-1]),model))))
}}
return(data_tab)
}
lrp <- function(X,model,alpha=1,beta=0) {
#model <- model
# model <- get_weights(model_nn)
# model[[4]] <- as.matrix(model[[4]])
# model[[2]] <- t(as.matrix(model[[2]]))
# X = as.matrix(exposure_data)
labels <- colnames(X)
X = as.matrix(X)
# Forward
R_X <- matrix(0,ncol=ncol(X),nrow=nrow(X))
U_B = NULL
H_all <- relu(t(t(as.matrix(X) %*% as.matrix(model[[1]])) + as.vector(model[[2]])))
o_all = relu(as.vector(H_all %*% model[[3]] + as.vector(model[[4]])))
for (i in 1:nrow(X)) {
if (i / 1000 == i %/% 1000) {print(i)}
H <- H_all[i,]
o <- as.numeric(o_all[i])
# Layer-wise relevance propagation (LRP)
Pos1 = model[[3]]
Pos1 = ifelse(Pos1>0,Pos1,0)
Pos1_sum = sum(H*Pos1)
Pos1_sum <- ifelse(is.na(Pos1_sum)|Pos1_sum==0,1,Pos1_sum)
Pos1 = (H*Pos1)/Pos1_sum
R_H = Pos1 * o
Pos2 = model[[1]]
#Pos2 = ifelse(Pos2>0,Pos2,0)
for (g in 1:length(H)) {
Pos2_sum = sum(ifelse(X[i,]*Pos2[,g]>0,X[i,]*Pos2[,g],0))
Pos2_sum <- ifelse(is.na(Pos2_sum)|Pos2_sum==0,1,Pos2_sum)
R_X[i,] = R_X[i,] + alpha * (ifelse(X[i,]*Pos2[,g]>0,X[i,]*Pos2[,g],0))/Pos2_sum * R_H[g]
}
# negative
Neg1 = model[[3]]
Neg1 = ifelse(Neg1<0,-Neg1,0)
Neg1_sum = sum(H*Neg1)
Neg1_sum <- ifelse(is.na(Neg1_sum)|Neg1_sum==0,1,Neg1_sum)
Neg1 = (H*Neg1)/Neg1_sum
R_H = Neg1 * o
Neg2 = model[[1]]
#Neg2 = ifelse(Neg2<0,-Neg2,0)
for (g in 1:length(H)) {
Neg2_sum = sum(ifelse(X[i,]*Neg2[,g]<0,X[i,]*Neg2[,g],0))
Neg2_sum <- ifelse(is.na(Neg2_sum)|Neg2_sum==0,1,Neg2_sum)
R_X[i,] = R_X[i,] - beta * (ifelse(X[i,]*Neg2[,g]<0,X[i,]*Neg2[,g],0))/Neg2_sum * R_H[g]
}
#    if (sum(R_X[i,])==0 | is.na(sum(R_X[i,]))) R_X[i,] = 0
}
R_X <- data.frame(R_X)
colnames(R_X) <- labels
return(R_X)
}
######### Simulation ##############
n = 40000
age = c(rep(0,n/2),rep(1,n/2))
sex = c(rep(0,n/4),rep(1,n/4),rep(0,n/4),rep(1,n/4))
table(sex,age)
y = c(rep(1,n/4/10),rep(0,n/4-n/4/10),
rep(1,n/4/10),rep(0,n/4-n/4/10),
rep(1,n/4/10*4),rep(0,n/4-n/4/10*4),
rep(1,n/4/10*2),rep(0,n/4-n/4/10*2))
data<-data.frame(y,age,sex)
data_d <- subset(data,y==1)
table(data$sex,data$age)
table(data_d$sex,data_d$age)/table(data$sex,data$age)
outcome_data <- data$y
exposure_data <- data[,-1]
library(CoOL)
exposure_data <- CoOL_0_binary_encode_exposure_data(exposure_data)
data <- data.frame(outcome_data,exposure_data)
###### XGBoost ######
library(xgboost)
bst <- xgboost(data = as.matrix(data[,-1]), label = data$outcome_data,
eta = 1, nrounds = 10, objective = "binary:logistic")
library(pROC)
auc(data$outcome_data,predict(bst,newdata = as.matrix(data[,-1])))
xgb.plot.tree(model = bst)
res_xgboost_shap <- shap_model(data,bst)
data_tab <- data.frame(age=c(0,0,1,1),sex=c(0,1,0,1),age_attri=NA,sex_attri=NA)
data_tab
View(data_tab)
shap_model <- function(data,model) {
data_tab <- data.frame(pollutant=c(0,0,1,1),sex=c(0,1,0,1),pollutant_attri=NA,sex_attri=NA)
data_tab
for (r in 1:nrow(data_tab)) {
for (first_var in 1:2) {
second_var = 3 - first_var # The opposite of the first value
first_var_data <- c(3,5)[first_var]
second_var_data <- c(3,5)[3-first_var]
data_tab[r,first_var+2] <- mean(c(mean(predict(model,as.matrix(data[data[,first_var_data] == data_tab[r,first_var],-1]))) - mean(predict(model,as.matrix(data[,-1]))),
mean(predict(model,as.matrix(data[data[,first_var_data] == data_tab[r,first_var] &
data[,second_var_data] == data_tab[r,second_var],-1])))-
mean(predict(model,as.matrix(data[data[,second_var_data] == data_tab[r,second_var],-1])))))
}}
return(data_tab)
}
res_xgboost_shap <- shap_model(data,bst)
View(res_xgboost_shap)
library(CoOL)
