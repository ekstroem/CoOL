######## Explainable AI for epidemiological cohort studies #############
########## functions #############

shap_model <- function(data,model) {
  data_tab <- data.frame(pollutant=c(0,0,1,1),sex=c(0,1,0,1),pollutant_attri=NA,sex_attri=NA)
  data_tab
  for (r in 1:nrow(data_tab)) {
    for (first_var in 1:2) {
      second_var = 3 - first_var # The opposite of the first value
      first_var_data <- c(3,5)[first_var]
      second_var_data <- c(3,5)[3-first_var]
      data_tab[r,first_var+2] <- mean(c(mean(predict(model,as.matrix(data[data[,first_var_data] == data_tab[r,first_var],-1]))) - mean(predict(model,as.matrix(data[,-1]))),
                                        mean(predict(model,as.matrix(data[data[,first_var_data] == data_tab[r,first_var] &
                                                                                      data[,second_var_data] == data_tab[r,second_var],-1])))-
                                          mean(predict(model,as.matrix(data[data[,second_var_data] == data_tab[r,second_var],-1])))))
    }}
  return(data_tab)
}

shap_cool <- function(data,model=model_CoOL) {
  data_tab <- data.frame(pollutant=c(0,0,1,1),sex=c(0,1,0,1),pollutant_attri=NA,sex_attri=NA)
  data_tab
for (r in 1:nrow(data_tab)) {
  for (first_var in 1:2) {
    second_var = 3 - first_var
    first_var_data <- c(3,5)[first_var]
    second_var_data <- c(3,5)[3-first_var]
    data_tab[r,first_var+2] <- mean(c(mean(CoOL_4_predict_risks(as.matrix(data[data[,first_var_data] == data_tab[r,first_var],-1]),model)) - mean(CoOL_4_predict_risks(as.matrix(data[,-1]),model)),
                                      mean(CoOL_4_predict_risks(as.matrix(data[data[,first_var_data] == data_tab[r,first_var] &
                                                                                 data[,second_var_data] == data_tab[r,second_var],-1]),model))-
                                        mean(CoOL_4_predict_risks(as.matrix(data[data[,second_var_data] == data_tab[r,second_var],-1]),model))))
  }}
  return(data_tab)
}


lrp <- function(X,model,alpha=1,beta=0) {
  #model <- model
  # model <- get_weights(model_nn)
  # model[[4]] <- as.matrix(model[[4]])
  # model[[2]] <- t(as.matrix(model[[2]]))
  # X = as.matrix(exposure_data)

  labels <- colnames(X)
  X = as.matrix(X)

  # Forward
  R_X <- matrix(0,ncol=ncol(X),nrow=nrow(X))
  U_B = NULL

  H_all <- relu(t(t(as.matrix(X) %*% as.matrix(model[[1]])) + as.vector(model[[2]])))
  o_all = relu(as.vector(H_all %*% model[[3]] + as.vector(model[[4]])))

  for (i in 1:nrow(X)) {
    if (i / 1000 == i %/% 1000) {print(i)}
    H <- H_all[i,]
    o <- as.numeric(o_all[i])

    # Layer-wise relevance propagation (LRP)
    Pos1 = model[[3]]
    Pos1 = ifelse(Pos1>0,Pos1,0)
    Pos1_sum = sum(H*Pos1)
    Pos1_sum <- ifelse(is.na(Pos1_sum)|Pos1_sum==0,1,Pos1_sum)
    Pos1 = (H*Pos1)/Pos1_sum

    R_H = Pos1 * o

    Pos2 = model[[1]]
    #Pos2 = ifelse(Pos2>0,Pos2,0)

    for (g in 1:length(H)) {
      Pos2_sum = sum(ifelse(X[i,]*Pos2[,g]>0,X[i,]*Pos2[,g],0))
      Pos2_sum <- ifelse(is.na(Pos2_sum)|Pos2_sum==0,1,Pos2_sum)
      R_X[i,] = R_X[i,] + alpha * (ifelse(X[i,]*Pos2[,g]>0,X[i,]*Pos2[,g],0))/Pos2_sum * R_H[g]
    }

    # negative
    Neg1 = model[[3]]
    Neg1 = ifelse(Neg1<0,-Neg1,0)
    Neg1_sum = sum(H*Neg1)
    Neg1_sum <- ifelse(is.na(Neg1_sum)|Neg1_sum==0,1,Neg1_sum)
    Neg1 = (H*Neg1)/Neg1_sum

    R_H = Neg1 * o

    Neg2 = model[[1]]
    #Neg2 = ifelse(Neg2<0,-Neg2,0)

    for (g in 1:length(H)) {
      Neg2_sum = sum(ifelse(X[i,]*Neg2[,g]<0,X[i,]*Neg2[,g],0))
      Neg2_sum <- ifelse(is.na(Neg2_sum)|Neg2_sum==0,1,Neg2_sum)
      R_X[i,] = R_X[i,] - beta * (ifelse(X[i,]*Neg2[,g]<0,X[i,]*Neg2[,g],0))/Neg2_sum * R_H[g]
    }
    #    if (sum(R_X[i,])==0 | is.na(sum(R_X[i,]))) R_X[i,] = 0
  }

  R_X <- data.frame(R_X)
  colnames(R_X) <- labels

  return(R_X)
}





######### Simulation ##############
n = 36000
px = c(rep(0,n/2),rep(1,n/2))
sex = c(rep(0,n/4),rep(1,n/4),rep(0,n/4),rep(1,n/4))
table(sex,px)
y = c(rep(1,n/4/10),rep(0,n/4-n/4/10),
      rep(1,n/4/10),rep(0,n/4-n/4/10),
      rep(1,n/4/10*2),rep(0,n/4-n/4/10*2),
      rep(1,n/4/10*4),rep(0,n/4-n/4/10*4))
data<-data.frame(y,px,sex)
data_d <- subset(data,y==1)
table(data$sex,data$px)
table(data_d$sex,data_d$px)/table(data$sex,data$px)
mean(data[data$px==1&data$sex==0,"y"])
outcome_data <- data$y
exposure_data <- data[,-1]
library(CoOL)
exposure_data <- CoOL_0_binary_encode_exposure_data(exposure_data)
data <- data.frame(outcome_data,exposure_data)

#setwd("C:/Users/lvb917/Dropbox/Post doc/Manuskripter/8 - Decomposing negative contributions/Example")
#write.csv(outcome_data,"outcome_data.csv",row.names = FALSE)
#write.csv(exposure_data,"exposure_data.csv",row.names = FALSE)

###### XGBoost ######
library(xgboost)
bst <- xgboost(data = as.matrix(data[,-1]), label = data$outcome_data,
               eta = 1, nrounds = 10, objective = "binary:logistic")
library(pROC)
auc(data$outcome_data,predict(bst,newdata = as.matrix(data[,-1])))
xgb.plot.tree(model = bst)
res_xgboost_shap <- shap_model(data,bst)
res_xgboost_shap


######### randomForest ############
library(randomForest)
model_rf <- randomForest(outcome_data ~ . , data = data)
model_rf
library(pROC)
auc(data$outcome_data,predict(model_rf))
res_rf_shap <- shap_model(data,bst)



##### Non-negative, shap and CoOL ################
library(CoOL)
model_CoOL <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data,hidden=5)
model_CoOL <- CoOL_2_train_neural_network(lr = 1e-4,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model_CoOL, epochs=1000,patience = 200, input_parameter_reg = 1e-3) # Train the non-negative model (The model can be retrained)
model_CoOL <- CoOL_2_train_neural_network(lr = 1e-5,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model_CoOL, epochs=1000,patience = 100, input_parameter_reg = 1e-3) # Train the non-negative model (The model can be retrained)
model_CoOL <- CoOL_2_train_neural_network(lr = 1e-6,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model_CoOL, epochs=1000,patience = 50, input_parameter_reg = 1e-3) # Train the non-negative model (The model can be retrained)
CoOL_4_AUC(outcome_data,exposure_data,model_CoOL)
# shap
res_nnnn_shap <- shap_cool(data)
# risk contributions
risk_contributions <- CoOL_5_layerwise_relevance_propagation(exposure_data,model_CoOL) # Risk contributions
res_nnnn_cool <- data.frame(pollutant=c(0,0,1,1),sex=c(0,1,0,1),pollutant_attri=NA,sex_attri=NA)
res_nnnn_cool[1,3:4] <- colMeans(risk_contributions[exposure_data$px_0==1&exposure_data$sex_0==1,])[c(1,3)]
res_nnnn_cool[2,3:4] <- colMeans(risk_contributions[exposure_data$px_0==1&exposure_data$sex_1==1,])[c(1,4)]
res_nnnn_cool[3,3:4] <- colMeans(risk_contributions[exposure_data$px_1==1&exposure_data$sex_0==1,])[c(2,3)]
res_nnnn_cool[4,3:4] <- colMeans(risk_contributions[exposure_data$px_1==1&exposure_data$sex_1==1,])[c(2,4)]

relevances <- lrp(exposure_data,model_CoOL,alpha = 1, beta = 0)
hist(rowSums(relevances)-predict(model_nn,as.matrix(data[,-1])))
res_nnnn_10 <- data.frame(pollutant=c(0,0,1,1),sex=c(0,1,0,1),pollutant_attri=NA,sex_attri=NA)
res_nnnn_10[1,3:4] <- colMeans(relevances[exposure_data$px_0==1&exposure_data$sex_0==1,])[c(1,3)]
res_nnnn_10[2,3:4] <- colMeans(relevances[exposure_data$px_0==1&exposure_data$sex_1==1,])[c(1,4)]
res_nnnn_10[3,3:4] <- colMeans(relevances[exposure_data$px_1==1&exposure_data$sex_0==1,])[c(2,3)]
res_nnnn_10[4,3:4] <- colMeans(relevances[exposure_data$px_1==1&exposure_data$sex_1==1,])[c(2,4)]

relevances <- lrp(exposure_data,model_CoOL,alpha = 2, beta = 1)
hist(rowSums(relevances)-predict(model_nn,as.matrix(data[,-1])))
res_nnnn_21 <- data.frame(pollutant=c(0,0,1,1),sex=c(0,1,0,1),pollutant_attri=NA,sex_attri=NA)
res_nnnn_21[1,3:4] <- colMeans(relevances[exposure_data$px_0==1&exposure_data$sex_0==1,])[c(1,3)]
res_nnnn_21[2,3:4] <- colMeans(relevances[exposure_data$px_0==1&exposure_data$sex_1==1,])[c(1,4)]
res_nnnn_21[3,3:4] <- colMeans(relevances[exposure_data$px_1==1&exposure_data$sex_0==1,])[c(2,3)]
res_nnnn_21[4,3:4] <- colMeans(relevances[exposure_data$px_1==1&exposure_data$sex_1==1,])[c(2,4)]







######## Neural Network ########
# Keras
library(keras)
inputs <- layer_input(shape = ncol(exposure_data), name="Exposures")
predictions <- inputs %>%
  layer_dense(units = 5, activation = 'relu', name="Hidden") %>%
  layer_dense(units = 1, activation = 'relu', name="Output")
model_nn <- keras_model(inputs = inputs, outputs = predictions)
summary(model_nn)
model_nn %>% compile(optimizer = optimizer_sgd(lr=0.1), loss = 'mean_squared_error', metrics = c('mean_squared_error'))
early_stop <- callback_early_stopping(monitor = "loss", patience = 50, restore_best_weights = FALSE)

history <- fit(
  object           = model_nn,
  x                = as.matrix(exposure_data),
  y                = outcome_data,
  batch_size       = 10,
  epochs           = 200,
  validation_split = 0,
  callbacks        =early_stop
)
library(pROC)
auc(data$outcome_data,as.vector(predict(model_nn,as.matrix(data[,-1]))))
res_nn_shap <- shap_model(as.matrix(data),model_nn)

model_temp <- get_weights(model_nn)
model_temp[[4]] <- as.matrix(model_temp[[4]])
model_temp[[2]] <- t(as.matrix(model_temp[[2]]))
risk_contributions <- CoOL_5_layerwise_relevance_propagation(exposure_data,model_temp) # Risk contributions

res_nn_cool <- data.frame(pollutant=c(0,0,1,1),sex=c(0,1,0,1),pollutant_attri=NA,sex_attri=NA)
res_nn_cool[1,3:4] <- colMeans(risk_contributions[exposure_data$px_0==1&exposure_data$sex_0==1,])[c(1,3)]
res_nn_cool[2,3:4] <- colMeans(risk_contributions[exposure_data$px_0==1&exposure_data$sex_1==1,])[c(1,4)]
res_nn_cool[3,3:4] <- colMeans(risk_contributions[exposure_data$px_1==1&exposure_data$sex_0==1,])[c(2,3)]
res_nn_cool[4,3:4] <- colMeans(risk_contributions[exposure_data$px_1==1&exposure_data$sex_1==1,])[c(2,4)]

relevances <- lrp(exposure_data,model_temp)
hist(rowSums(relevances)-predict(model_nn,as.matrix(data[,-1])))
res_nn_10 <- data.frame(pollutant=c(0,0,1,1),sex=c(0,1,0,1),pollutant_attri=NA,sex_attri=NA)
res_nn_10[1,3:4] <- colMeans(relevances[exposure_data$px_0==1&exposure_data$sex_0==1,])[c(1,3)]
res_nn_10[2,3:4] <- colMeans(relevances[exposure_data$px_0==1&exposure_data$sex_1==1,])[c(1,4)]
res_nn_10[3,3:4] <- colMeans(relevances[exposure_data$px_1==1&exposure_data$sex_0==1,])[c(2,3)]
res_nn_10[4,3:4] <- colMeans(relevances[exposure_data$px_1==1&exposure_data$sex_1==1,])[c(2,4)]

relevances <- lrp(exposure_data,model_temp,alpha = 2, beta = 1)
hist(rowSums(relevances)-predict(model_nn,as.matrix(data[,-1])))
res_nn_21 <- data.frame(pollutant=c(0,0,1,1),sex=c(0,1,0,1),pollutant_attri=NA,sex_attri=NA)
res_nn_21[1,3:4] <- colMeans(relevances[exposure_data$px_0==1&exposure_data$sex_0==1,])[c(1,3)]
res_nn_21[2,3:4] <- colMeans(relevances[exposure_data$px_0==1&exposure_data$sex_1==1,])[c(1,4)]
res_nn_21[3,3:4] <- colMeans(relevances[exposure_data$px_1==1&exposure_data$sex_0==1,])[c(2,3)]
res_nn_21[4,3:4] <- colMeans(relevances[exposure_data$px_1==1&exposure_data$sex_1==1,])[c(2,4)]




########### PLOT simple data ###########
plot_res <- function(res,show=T) {
  if (show == T) {
  plot(res$pollutant_attri,res$sex_attri,col=c("orange","dodgerblue","orange","dodgerblue"),cex=2,pch=c(1,1,16,16),
       ylab="Attribution to sex",xlab="Attribution to age",xlim=c(-.3,.3),ylim=c(-.3,.3),yaxs='i',xaxs='i',axes=F,frame.plot = T,type='n')
  abline(h=0,col="grey")
  abline(v=0,col="grey")
  points(res$pollutant_attri,res$sex_attri,col=c("orange","dodgerblue","orange","dodgerblue"),cex=2,pch=c(1,1,16,16))
  }
  if (show == F) {
    plot(0,0,col=c("blue","red","blue","red"),pch=c(1,1,16,16),
         ylab="Attribution to sex",xlab="Attribution to age",xlim=c(-.3,.3),ylim=c(-.3,.3),yaxs='i',xaxs='i',axes=F,frame.plot = T,type='n')
    arrows(x0=seq(-10,10,0.02),x1=seq(-10,10,0.02)+1,y0=-0.5,y1=0.5,length=0,col="lightgrey")
      rect(-0.3,-0.3,0.3,0.3)
  }
}
setwd("C:/Users/lvb917/Dropbox/Post doc/Manuskripter/8 - Decomposing negative contributions/Example")
png("results.png",res=300,height=8,width=10,units = 'in')
par(mfrow = c(3,4),
          oma = c(8,8,5,0) + 0.1,
          mar = c(0,0,0,0))
plot_res(res_xgboost_shap)
title(xlab = "Attribution to pollutant X",
      ylab = "Attribution to sex",
      outer = TRUE, line = 5, cex.lab=1.5)
axis(2)
library(pROC)
mtext(paste0("XGBoost\n(AUC=",format(round(auc(data$outcome_data,predict(bst,newdata = as.matrix(data[,-1]))),2),nsmall=2),")"),line = 1)
mtext("SHAP",line = 3,side = 2)
plot_res(res_rf_shap)
mtext(paste0("Random forest\n(AUC=",format(round(auc(data$outcome_data,predict(model_rf,newdata = as.matrix(data[,-1]))),2),nsmall=2),")"),line = 1)
plot_res(res_nn_shap)
mtext(paste0("NN\n(AUC=",format(round(auc(data$outcome_data,as.vector(predict(model_nn,as.matrix(data[,-1])))),2),nsmall=2),")"),line = 1)
plot_res(res_nnnn_shap)
mtext(paste0("Non-negative NN\n(AUC=",format(round(auc(data$outcome_data,CoOL_4_predict_risks(exposure_data,model_CoOL)),2),nsmall=2),")"),line = 1)
plot_res(show = F)
axis(2)
mtext("LRP1,0-bias attribution",line = 3,side = 2)
plot_res(show = F)
plot_res(res_nn_cool)
#text(-0.2,0.2,"Will not be robust",pos=4)
plot_res(res_nnnn_cool)
text(-0.2,0.2,"Causes of Outcome Learning",pos=4)
plot_res(show = F)
mtext("LRP2,1",line = 3,side = 2)
axis(2)
axis(1)
plot_res(show = F)
axis(1)
plot_res(res_nn_21)
axis(1)
plot_res(res_nnnn_21)
axis(1)
dev.off()







############# Real Life #############
# Tutorial:
library(CoOL)
setwd("C:/Users/lvb917/Dropbox/Post doc/Manuskripter/3 - CoOL/Real life analysis")
exposure_data <- read.csv("dataset_X.csv")
mean(exposure_data$age)
median(exposure_data$age)
exposure_data$age <- floor(exposure_data$age/10)*10
outcome_data <- read.table("dataset_y.csv", quote="\"", comment.char="")
outcome_data <- as.vector(outcome_data$V1)
outcome_data <- ifelse(outcome_data < 0, 0, 1)
data <- cbind(outcome_data,exposure_data)
data_d <- subset(data,data$outcome_data==1)
table(data$age,data$sex_isFemale)
table(data_d$age,data_d$sex_isFemale)
risk_tab <- table(data_d$age,data_d$sex_isFemale)/table(data$age,data$sex_isFemale)
prop.table(table(data$age,data$sex_isFemale))
par(mfrow=c(1,1));par(mar=c(5,5,3,3))
barplot(t(risk_tab),beside = T,main="Mortality risk by age and sex",xlab="Age",ylab="Mortality risk", col=c("dodgerblue","orange"),
        legend = c("Men","Women"), args.legend = list(x = "topleft"))




######## LIME early code #######

# Explaining a model based on tabular data
library(MASS)
iris_test <- iris[1, 1:4]
iris_train <- iris[-1, 1:4]
iris_lab <- iris[[5]][-1]
# Create linear discriminant model on iris data
model <- lda(iris_train, iris_lab)
plot(model,col=as.numeric(iris_lab))
# Create explanation object
library(lime)
explanation <- lime(iris_train, model)
fit <- explain(iris_test, explanation, n_labels = 1, n_features = 2)

