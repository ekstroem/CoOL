###########################################################!
########## Causes of Outcome Learning #####################
###########################################################!
#devtools::install_github("ekstroem/CoOL")

# Tutorial:
library(CoOL)
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
set.seed(1)
data <- CoOL_0_working_example(n=40000) # use 40 000 to replicate the paper
outcome_data <- data[,1]
exposure_data <- data[,-1]
exposure_data <- CoOL_0_binary_encode_exposure_data(exposure_data)
model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data,hidden=5)

model <- CoOL_2_train_neural_network(lr = 1e-4,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=1000,patience = 50) # Train the non-negative model (The model can be retrained)
model <- CoOL_2_train_neural_network(lr = 1e-5,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=1000,patience = 50) # Train the non-negative model (The model can be retrained)
model <- CoOL_2_train_neural_network(lr = 1e-6,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=1000,patience = 50) # Train the non-negative model (The model can be retrained)

model <- CoOL_2_train_neural_network(lr = 1e-4,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=500,patience = 50,
                                     input_parameter_reg = 1e-3, baseline_risk_reg = 1e-4) # Train the non-negative model (The model can be retrained)
model <- CoOL_2_train_neural_network(lr = 1e-5,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=500,patience = 50,
                                     input_parameter_reg = 1e-3, baseline_risk_reg = 1e-5) # Train the non-negative model (The model can be retrained)

# Use below to combine all plots (See the note regarding the dendrogram)
#layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(3,3,3,3))
par(mfrow=c(1,3))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance - training data") # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model") # Model visualization
library(pROC)
CoOL_4_AUC(outcome_data,exposure_data,model) # AUC
# Plot these
risk_contributions <- CoOL_5_layerwise_relevance_propagation(exposure_data,model) # Risk contributions
library(ClustGeo)
library(wesanderson)
library(ggtree)
library(ggplot2)
png("dendrogram2.png",units = 'in',res=300,height = 4,width = 4)
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = 2, title = "Colored for 2 sub-groups") # Dendrogram
dev.off()
png("dendrogram3.png",units = 'in',res=300,height = 4,width = 4)
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = 3, title = "Colored for 3 sub-groups") # Dendrogram
dev.off()
png("dendrogram4.png",units = 'in',res=300,height = 4,width = 4)
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = 4, title = "Colored for 4 sub-groups") # Dendrogram
dev.off()
library(imager);im <- load.image("dendrogram.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram2.png"),axes=F);par(mar=c(5,5,3,2))
library(imager);im <- load.image("dendrogram.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram3.png"),axes=F);par(mar=c(5,5,3,2))
library(imager);im <- load.image("dendrogram.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram4.png"),axes=F);par(mar=c(5,5,3,2))

sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = 4) # Assign sub-groups
par(mfrow=c(2,1))
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups) # Prevalence and mean risk plot
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups,outcome_data = outcome_data,exposure_data = exposure_data, model=model,exclude_below = 0.0001) #  Mean risk contributions by sub-groups

End





library(SRCL) # library(SRCL)
library(CoOL) # library(SRCL)
library(pROC)
library(ClustGeo)
library(wesanderson)
library(ggtree)
library(ggplot2)
library(imager)
CoOL_all <- function(data,sub_groups=3,exclude_below=0.001) {
library(CoOL)
outcome_data <- data[,1]
exposure_data <- data[,-1]
exposure_data <- CoOL_0_binary_encode_exposure_data(exposure_data)
model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data,hidden=5)
model <- CoOL_2_train_neural_network(lr = 1e-4,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=1000,patience = 50) # Train the non-negative model (The model can be retrained)
model <- CoOL_2_train_neural_network(lr = 1e-5,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=1000,patience = 50) # Train the non-negative model (The model can be retrained)
model <- CoOL_2_train_neural_network(lr = 1e-6,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=1000,patience = 50) # Train the non-negative model (The model can be retrained)
# Use below to combine all plots (See the note regarding the dendrogram)
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(3,3,3,3))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance - training data") # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model") # Model visualization
library(pROC)
CoOL_4_AUC(outcome_data,exposure_data,model) # AUC
risk_contributions <- CoOL_5_layerwise_relevance_propagation(exposure_data,model) # Risk contributions
library(ClustGeo)
library(wesanderson)
library(ggtree)
library(ggplot2)
png("dendrogram.png",units = 'in',res=300,height = 4,width = 4)
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = sub_groups) # Dendrogram
dev.off()
library(imager);im <- load.image("dendrogram.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram.png"),axes=F);par(mar=c(5,5,3,2))
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = sub_groups) # Assign sub-groups
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups) # Prevalence and mean risk plot
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups,exposure_data = exposure_data, outcome_data = outcome_data,model=model,exclude_below = exclude_below) #  Mean risk contributions by sub-groups
}

#setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
#set.seed(1)
#data <- CoOL_0_working_example(n=1000) # use 40 000 to replicate the paper
#CoOL_all(data)


#### Simulation 1 #####
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
for (repeated in 1:10) {
  set.seed(repeated)
  data <- CoOL_0_working_example(n=40000)
  png(paste0("Repeated_",repeated,".png"),units = 'in',res=300,height = 8,width = 7)
  CoOL_all(data)
  dev.off()
}


#### Simulation 2 #####
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
for (add_noise in seq(0,25,5)) {
  set.seed(add_noise)
  data <- CoOL_0_working_example(n=40000)
  var_names <-colnames(data)
  if (add_noise > 0) {
    for (x in 1:add_noise)  {
      data <- cbind(data,sample(0:1,nrow(data),replace = TRUE))  }
    colnames(data) <- c(var_names,paste0("noise_",1:c(1*add_noise))) }
  png(paste0("Add_noise_",add_noise,".png"),units = 'in',res=300,height = 8,width = 7)
  CoOL_all(data)
  dev.off()
}

#### Simulation 3 - Complex example #####
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
for (repeated in 1:10) {
  set.seed(repeated)
  data <- CoOL_0_complex_simulation(n=40000)
  png(paste0("Complex_",repeated,".png"),units = 'in',res=300,height = 8,width = 12)
  CoOL_all(data)
  dev.off()
}


#### Simulation 4 - Common example #####
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
for (repeated in 1:10) {
  set.seed(repeated)
  data <- CoOL_0_common_simulation(n=40000)
  png(paste0("Common_",repeated,".png"),units = 'in',res=300,height = 8,width = 14)
  CoOL_all(data,sub_groups = 4, exclude_below = 0.01)
  dev.off()
}


#### Simulation 5 - Mediation example #####
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
for (repeated in 1:10) {
  set.seed(repeated)
  data <- CoOL_0_mediation_simulation(n=40000)
  png(paste0("Mediation_",repeated,".png"),units = 'in',res=300,height = 8,width = 12)
  CoOL_all(data,sub_groups = 4, exclude_below = 0.01)
  dev.off()
}







###########################################################!
########## Causes of outcome learning #####################
###########################################################!
#if(!require("devtools")) insntall.packages("devtools")
#devtools::install_github("ekstroem/CoOL")
library(CoOL) # library(CoOL)
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
set.seed(1)
data <- CoOL_0_working_example(n=40000) # use 40 000 to replicate the paper
outcome_data <- data[,1]
exposure_data <- CoOL_0_binary_encode_exposure_data(data[,-1])
model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data) # Initiate the non-negative model
model <- CoOL_2_train_neural_network(X_train=exposure_data, Y_train=outcome_data, model=model, epochs=2000) # Train the non-negative model (The model can be retrained)
# Use below to combine all plots (See the note regarding the dendrogram)
## layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(3,3,3,3))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance - training data") # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model") # Model visualization
CoOL_4_AUC(outcome_data,exposure_data,model) # AUC
risk_contributions <- CoOL_5_layerwise_relevance_propagation(exposure_data,model) # Risk contributions
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = 3) # Dendrogram
## save the dendrogram if it should be part of a combined plot by using below line
## png("dendrogram.png",units = 'in',res=300,height = 4,width = 4); CoOL_6_dendrogram(risk_contributions,number_of_subgroups = 3); dev.off(); library(imager);im <- load.image("dendrogram.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram.png"),axes=F);par(mar=c(5,5,3,2))
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = 3) # Assign sub-groups
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups) # Prevalence and mean risk plot
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups) #  Mean risk contributions by sub-groups


CoOL_all <- function(data,epochs=2000,patience=100) {
  outcome_data <- data[,1]
  exposure_data <- CoOL_0_binary_encore_exposure_data(data[,-1])
  model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data)
  model <- CoOL_2_train_neural_network(X_train=exposure_data, Y_train=outcome_data, model=model, epochs=epochs,patience = patience)
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE))
  plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance - training data")
  CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model")
  CoOL_4_AUC(outcome_data,exposure_data,model)
  risk_contributions <- CoOL_5_layerwise_relevance_propagation(exposure_data,model)
  png("dendrogram.png",units = 'in',res=300,height = 4,width = 4)
  CoOL_6_dendrogram(risk_contributions,number_of_subgroups = 3)
  dev.off()
  library(imager);im <- load.image("dendrogram.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram.png"),axes=F);par(mar=c(5,5,3,2))
  sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = 3)
  CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups)
  CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups)
}


##### Repeated 100 times ####
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
for (simulation in 1:10) {
print(paste0("Simulation ",simulation," at time :",Sys.time()))
set.seed(simulation)
data <- CoOL_0_working_example(n=40000)
png(paste0("Repeated_",simulation,".png"),units = 'in',res=300,height = 8,width = 7)
CoOL_all(data)
dev.off()
}

#### Added noise #####
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
for (add_noise in 10:10) {
set.seed(12345)
data <- CoOL_0_working_example(n=40000)
var_names <-colnames(data)
if (add_noise > 0) {
  for (x in 1:add_noise)  {
    data <- cbind(data,sample(0:1,nrow(data),replace = TRUE))  }
  colnames(data) <- c(var_names,paste0("noise_",1:c(1*add_noise))) }
png(paste0("Add_noise_",add_noise,".png"),units = 'in',res=300,height = 8,width = 7)
CoOL_all(data)
dev.off()
}

