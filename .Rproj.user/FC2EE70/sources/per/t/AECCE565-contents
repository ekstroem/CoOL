###########################################################!
########## Causes of Outcome Learning #####################
###########################################################!
#devtools::install_github("ekstroem/CoOL")

#### Home page ####
library(CoOL)
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
set.seed(1)
data <- CoOL_0_working_example(n=40000) # use 40 000 to replicate the paper
png("main.png",units = 'in',res=300,height = 8,width = 7)
CoOL_default(data, monitor = FALSE)
dev.off()


#### FIGURE 4 #######
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
library(CoOL)
set.seed(1)
data <- CoOL_0_working_example(n=10000) # use 40 000 to replicate the paper
outcome_data <- data[,1]
exposure_data <- data[,-1]
exposure_data <- CoOL_0_binary_encode_exposure_data(exposure_data)
model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data,hidden=10)
model <- CoOL_2_train_neural_network(lr = 1e-4,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=1000,patience = 200, input_parameter_reg = 1e-4) # Train the non-negative model (The model can be retrained)
model <- CoOL_2_train_neural_network(lr = 1e-5,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=1000,patience = 100, input_parameter_reg = 1e-4) # Train the non-negative model (The model can be retrained)
model <- CoOL_2_train_neural_network(lr = 1e-6,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=1000,patience = 50, input_parameter_reg = 1e-4) # Train the non-negative model (The model can be retrained)
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
risk_contributions <- CoOL_5_layerwise_relevance_propagation(exposure_data,model) # Risk contributions
png("dendrogram3.png",units = 'in',res=300,height = 4,width = 4)
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = 3, title = "D) Dendrogram with 3 sub-groups") # Dendrogram
dev.off()
png("main.png",units = 'in',res=300,height = 8,width = 8)
par(oma = c(0,0,3,0))
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(4,4,3,3))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="A) Performance during training\n\n",ylim=quantile(model$train_performance,c(0,.975))) # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "B) Model connection weights\nand intercepts") # Model visualization
mtext(paste0("CoOL (n=",format(nrow(data),big.mark = ",")," events=",format(sum(outcome_data),big.mark = ","),")"),side=3,line=5)
CoOL_4_AUC(outcome_data,exposure_data,model, title = "C) Receiver operating\ncharacteristic curve") # AUC
library(imager);im <- load.image("dendrogram3.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram3.png"),axes=F);par(mar=c(5,5,3,2))
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = 3) # Assign sub-groups
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups,title = "E) Prevalence and mean risk of sub-groups") # Prevalence and mean risk plot
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups,outcome_data = outcome_data,exposure_data = exposure_data, model=model,exclude_below = 0.01) #  Mean risk contributions by sub-groups
dev.off()




##### TUTORIAL ######
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")

library(CoOL)
set.seed(1)
data <- CoOL_0_working_example(n=10000)
outcome_data <- data[,1]
exposure_data <- data[,-1]
exposure_data <- CoOL_0_binary_encode_exposure_data(exposure_data)
model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data)
model <- CoOL_2_train_neural_network(X_train=exposure_data, Y_train=outcome_data, model=model)
par(mfrow=c(1,3),mar=c(5,5,6,1))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance during training\n\n",ylim=quantile(model$train_performance,c(0,.975))) # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model connection weights\nand intercepts") # Model visualization
library(pROC)
CoOL_4_AUC(outcome_data,exposure_data,model, title = "Receiver operating\ncharacteristic curve") # AUC
# Plot these
risk_contributions <- CoOL_5_layerwise_relevance_propagation(exposure_data,model) # Risk contributions
library(ClustGeo)
library(wesanderson)
library(ggtree)
library(ggplot2)
png("dendrogram2.png",units = 'in',res=300,height = 4,width = 4)
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = 2, title = "Colored for 2 sub-groups") # Dendrogram
dev.off()
png("dendrogram3.png",units = 'in',res=300,height = 4,width = 4)
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = 3, title = "Colored for 3 sub-groups") # Dendrogram
dev.off()
png("dendrogram4.png",units = 'in',res=300,height = 4,width = 4)
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = 6, title = "Colored for 4 sub-groups") # Dendrogram
dev.off()
library(imager);im <- load.image("dendrogram2.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram2.png"),axes=F);par(mar=c(5,5,3,2))
library(imager);im <- load.image("dendrogram3.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram3.png"),axes=F);par(mar=c(5,5,3,2))
library(imager);im <- load.image("dendrogram4.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram4.png"),axes=F);par(mar=c(5,5,3,2))
png("dendrogram3.png",units = 'in',res=300,height = 4,width = 4)
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = 3, title = "D) Dendrogram with 3 sub-groups") # Dendrogram
dev.off()
library(imager);im <- load.image("dendrogram3.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram3.png"),axes=F);par(mar=c(5,5,3,2))
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = 3) # Assign sub-groups
par(mfrow=c(2,1))
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups,title = "Prevalence and mean risk of sub-groups") # Prevalence and mean risk plot
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups,outcome_data = outcome_data,exposure_data = exposure_data, model=model,exclude_below = 0.01) #  Mean risk contributions by sub-groups

#End




###### Example for the R package #####
while (FALSE) {
  library(CoOL)
  set.seed(1)
  data <- CoOL_0_working_example(n=10000)
  outcome_data <- data[,1]
  exposure_data <- data[,-1]
  exposure_data <- CoOL_0_binary_encode_exposure_data(exposure_data)
  model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data,hidden=5)
  model <- CoOL_2_train_neural_network(X_train=exposure_data, Y_train=outcome_data, model=model) # Train the non-negative model (The model can be retrained)
  plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="A) Performance during training\n\n",ylim=quantile(model$train_performance,c(0,.975))) # Model performance
  CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "B) Model connection weights\nand intercepts") # Model visualization
  CoOL_4_AUC(outcome_data,exposure_data,model, title = "C) Receiver operating\ncharacteristic curve") # AUC
  risk_contributions <- CoOL_5_layerwise_relevance_propagation(exposure_data,model) # Risk contributions
  CoOL_6_dendrogram(risk_contributions,number_of_subgroups = 3, title = "D) Dendrogram with 3 sub-groups") # Dendrogram
  sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = 3) # Assign sub-groups
  CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups,title = "E) Prevalence and mean risk of sub-groups") # Prevalence and mean risk plot
  CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups,outcome_data = outcome_data,exposure_data = exposure_data, model=model,exclude_below = 0.01) #  Mean risk contributions by sub-groups
}




#### Simulation 1 - Repeated #####
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
for (repeated in 1:10) {
  set.seed(repeated)
  data <- CoOL_0_working_example(n=10000)
  png(paste0("Repeated_",repeated,".png"),units = 'in',res=300,height = 8,width = 8)
  CoOL_default(data)
  dev.off()
}


#### Simulation 2 - Added noise #####
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
for (add_noise in seq(0,50,5)) {
  set.seed(add_noise)
  data <- CoOL_0_working_example(n=10000)
  var_names <-colnames(data)
  if (add_noise > 0) {
    for (x in 1:add_noise)  {
      data <- cbind(data,sample(0:1,nrow(data),replace = TRUE))  }
    colnames(data) <- c(var_names,paste0("noise_",1:c(1*add_noise))) }
  png(paste0("Add_noise_",add_noise,".png"),units = 'in',res=300,height = 8,width = 8)
  CoOL_default(data, hidden = 10)
  dev.off()
}


#### Simulation 3 - Complex example #####
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
for (repeated in 1:10) {
  set.seed(repeated)
  data <- CoOL_0_complex_simulation(n=50000)
  png(paste0("Complex_",repeated,".png"),units = 'in',res=300,height = 8,width = 12)
  CoOL_default(data,input_parameter_reg = 1e-4)
  dev.off()
}


#### Simulation 4 - Common example #####
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
for (repeated in 1:10) {
  set.seed(repeated)
  data <- CoOL_0_common_simulation(n=10000)
  png(paste0("Common_",repeated,".png"),units = 'in',res=300,height = 8,width = 14)
  CoOL_default(data,sub_groups = 4, exclude_below = 0.01)
  dev.off()
}


#### Simulation 5 - Mediation example #####
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
for (repeated in 1:10) {
  set.seed(repeated)
  data <- CoOL_0_mediation_simulation(n=10000)
  png(paste0("Mediation_",repeated,".png"),units = 'in',res=300,height = 8,width = 12)
  CoOL_default(data,sub_groups = 4, exclude_below = 0.01)
  dev.off()
}


#### Simulation 6 - Confounding #####
# No inclusion of C
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
for (repeated in 1:10) {
  set.seed(10 + repeated)
  data <- CoOL_0_confounding_simulation(n=10000)
  data <- data[,-4]
  png(paste0("Confounding_without_c_",repeated,".png"),units = 'in',res=300,height = 8,width = 12)
  CoOL_default(data,sub_groups = 4, exclude_below = 0.01,input_parameter_reg = 1e-3)
  dev.off()
}
# Inclusion of C
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
for (repeated in 1:10) {
  set.seed(10 + repeated)
  data <- CoOL_0_confounding_simulation(n=10000)
  png(paste0("Confounding_with_c_",repeated,".png"),units = 'in',res=300,height = 8,width = 12)
  CoOL_default(data,sub_groups = 4, exclude_below = 0.01,input_parameter_reg = 1e-3)
  dev.off()
}


# #### Simulation ? - M-bias #####
# setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
# # Some converging issues with some seed nrs, use 1:7,9:10,12
# for (repeated in c(1:7,9:10,12)) {
#   set.seed(100 + repeated)
#   data <- CoOL_0_m_bias_simulation(n=40000)
#   png(paste0("M_bias_",repeated,".png"),units = 'in',res=300,height = 8,width = 12)
#   CoOL_default(data,sub_groups = 2, exclude_below = 0.01,input_parameter_reg = 1e-5)
#   dev.off()
# }
#
#
#
# #### Simulation ? - Selection #####
# setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
# # Some converging issues with some seed nrs, use 1:7,9:10,12
# for (repeated in c(1:7,9:10,12)) {
#   set.seed(100 + repeated)
#   data <- CoOL_0_selection_simulation(n=40000)
#   png(paste0("M_bias_",repeated,".png"),units = 'in',res=300,height = 8,width = 12)
#   CoOL_default(data,sub_groups = 2, exclude_below = 0.01,input_parameter_reg = 1e-5)
#   dev.off()
# }






#### Simulation 7 - Robustness check synergy functions #####
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
for (hidden in c(1,2,3,4,seq(5,20,5))) {
  set.seed(hidden)
  data <- CoOL_0_working_example(n=10000)
  png(paste0("Synergy_functions_",hidden,".png"),units = 'in',res=300,height = 8,width = 8)
  CoOL_default(data, hidden = hidden)
  dev.off()
}


#### Simulation 8 - Robustness check data size #####
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
for (size in c(100,250,500,750,1000,2000,3000,4000,seq(5000,40000,5000))) {
  set.seed(size)
  data <- CoOL_0_working_example(n=size)
  png(paste0("Data_size_",size,".png"),units = 'in',res=300,height = 8,width = 8)
  CoOL_default(data)
  dev.off()
}


#### Simulation 9 - Robustness check regularization #####
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
for (reg in c(20,10,5,4,3,2)) {
  set.seed(reg)
  data <- CoOL_0_working_example(n=10000)
  png(paste0("Regularization_",reg,".png"),units = 'in',res=300,height = 8,width = 8)
  CoOL_default(data, input_parameter_reg = 1*10^(-c(reg)),monitor = FALSE,epochs = 1000)
  dev.off()
}











########## Mortality paper ############
# Tutorial:
library(CoOL)
setwd("C:/Users/lvb917/Dropbox/Post doc/Manuskripter/3 - CoOL/Real life analysis")
set.seed(1)
exposure_data <- read.csv("dataset_X.csv")
outcome_data <- read.table("dataset_y.csv", quote="\"", comment.char="")
outcome_data <- as.vector(outcome_data$V1)
outcome_data <- ifelse(outcome_data < 0, 0, 1)
data <- cbind(outcome_data,exposure_data)
names(data)
summary(data$systolic_blood_pressure)

hist(data$age)
data <- data[data$age <50,]
exposure_data <- data[,-1]
outcome_data <- data[,1]
names(exposure_data)
exposure_data$age <- as.factor(floor(exposure_data$age/10)*10)
summary(exposure_data$bmi)
exposure_data$bmi_cat <- 3
exposure_data$bmi_cat <- ifelse(exposure_data$bmi<=25,2,exposure_data$bmi_cat)
exposure_data$bmi_cat <- ifelse(exposure_data$bmi<18.5,1,exposure_data$bmi_cat)
exposure_data$bmi_cat <- as.factor(exposure_data$bmi_cat)
exposure_data$sys_blood_pres_high = as.factor(ifelse(exposure_data$systolic_blood_pressure>120,1,0))
exposure_data <- exposure_data[,c(2,3,81,82)]


#exposure_data$lymphocytes <- ifelse(exposure_data$lymphocytes <20,1,0)
data <- cbind(outcome_data,exposure_data)
data <- na.omit(data) # ingen
data_org <- data
library(table1)
data$outcome_data <- as.factor(data$outcome_data)
table1(~ .,data)
set.seed(1)
select <- sample(1:nrow(data),round(nrow(data)*0.5))
hold_out <- data[-select,]
data <- data[select,]
table1(~ .,data)
table1(~ .,hold_out)
hold_out$outcome_data <- as.numeric(hold_out$outcome_data)-1
data$outcome_data <- as.numeric(data$outcome_data)-1

exposure_data <- data[,-1]
outcome_data <- as.numeric(data[,1])-1
exposure_data <- CoOL_0_binary_encode_exposure_data(exposure_data)

model <- CoOL_1_initiate_neural_network(inputs=ncol(exposure_data), output = outcome_data,hidden=10)
model <- CoOL_2_train_neural_network(lr = 1e-4,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=10000,patience = 200, input_parameter_reg = 1e-4) # Train the non-negative model (The model can be retrained)
model <- CoOL_2_train_neural_network(lr = 1e-5,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=1000,patience = 100, input_parameter_reg = 1e-4) # Train the non-negative model (The model can be retrained)
model <- CoOL_2_train_neural_network(lr = 1e-6,X_train=exposure_data, Y_train=outcome_data,X_test=exposure_data, Y_test=outcome_data, model=model, epochs=1000,patience = 50, input_parameter_reg = 1e-4) # Train the non-negative model (The model can be retrained)
# Use below to combine all plots (See the note regarding the dendrogram)
risk_contributions <- CoOL_5_layerwise_relevance_propagation(exposure_data,model) # Risk contributions
png("dendrogram.png",units = 'in',res=300,height = 4,width = 4)
library(ClustGeo)
CoOL_6_dendrogram(risk_contributions,number_of_subgroups = 6)
dev.off()
png("CoOL_results.png",units = 'in',res=300,height =11,width = 10)
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE));par(mar=c(3,3,3,3))
#par(mfrow=c(1,3))
plot(model$train_performance,type='l',yaxs='i',ylab="Mean squared error",xlab="Epochs",main="Performance - training data") # Model performance
CoOL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "Model") # Model visualization
library(pROC)
CoOL_4_AUC(outcome_data,exposure_data,model) # AUC
# Plot these
library(ClustGeo)
library(wesanderson)
library(ggtree)
library(ggplot2)
library(imager);im <- load.image("dendrogram.png");par(mar=c(0,0,0,0));plot(load.image("dendrogram.png"),axes=F);par(mar=c(5,5,3,2))
sub_groups <- CoOL_6_sub_groups(risk_contributions,number_of_subgroups = 6) # Assign sub-groups
#par(mfrow=c(2,1))
CoOL_7_prevalence_and_mean_risk_plot(risk_contributions,sub_groups) # Prevalence and mean risk plot
CoOL_8_mean_risk_contributions_by_sub_group(risk_contributions, sub_groups,outcome_data = outcome_data,exposure_data = exposure_data, model=model,exclude_below = 0.01) #  Mean risk contributions by sub-groups
dev.off()

# validation - finding 1
hold_out_d <- subset(hold_out,hold_out$outcome_data==1)
table(hold_out$age,hold_out$sys_blood_pres_high)
table(hold_out_d$age,hold_out_d$sys_blood_pres_high)
t(table(hold_out_d$age,hold_out_d$sys_blood_pres_high)/table(hold_out$age,hold_out$sys_blood_pres_high))
#prop.table(table(hold_out$age,hold_out$sex_isFemale))
hold_out$sys_age <- as.numeric(hold_out$sys_blood_pres_high) + 10 * as.numeric(hold_out$age)
summary((lm(outcome_data ~ as.factor(sys_age)-1,data=hold_out)))
confint((lm(outcome_data ~ as.factor(sys_age)-1,data=hold_out)))

# validation - finding 2
hyp <- subset(hold_out,hold_out$sex_isFemale=="False"&hold_out$age=="40"&hold_out$sys_blood_pres_high=="1")
hyp_d <- subset(hyp,hyp$outcome_data==1)
table(hyp$bmi_cat)
table(hyp_d$bmi_cat)
table(hyp_d$bmi_cat) / table(hyp$bmi_cat)
summary((lm(outcome_data ~ bmi_cat-1,data=hyp)))
confint((lm(outcome_data ~ bmi_cat-1,data=hyp)))
summary(lm(outcome_data ~ as.numeric(bmi_cat),data=hyp))
confint(lm(outcome_data ~ as.numeric(bmi_cat),data=hyp))
# synergy
hold_out$combined <- ifelse(hold_out$sex_isFemale=="False"&hold_out$age=="40"&hold_out$sys_blood_pres_high=="1"&hold_out$bmi_cat == 1,1,0)
summary(lm(outcome_data~sex_isFemale+age+sys_blood_pres_high+bmi_cat,data=hold_out))
summary(lm(outcome_data~sex_isFemale+age+sys_blood_pres_high+bmi_cat+combined,data=hold_out))

# Mutual adjusted
fit <- summary(lm(outcome_data ~.,data=data_org))$coef
fit_C <- confint(lm(outcome_data ~.,data=data_org))
mar_tab <- data.frame(cbind(rownames(fit),paste0(round(fit[,1],2)," (",round(fit_C[,1],2)," to ",round(fit_C[,2],2),")")))
colnames(mar_tab) <- c("var","mutual_adjusted")
mar_tab <- mar_tab[-1,]
mar_tab
# marginal
mar_tab$marg <- NA
fit <- summary(lm(outcome_data ~ sex_isFemale,data=data_org))$coef
fit_C <- confint(lm(outcome_data ~sex_isFemale,data=data_org))
mar_tab$marg[1] <- data.frame(cbind(rownames(fit),paste0(round(fit[,1],2)," (",round(fit_C[,1],2)," to ",round(fit_C[,2],2),")")))[-1,2]
fit <- summary(lm(outcome_data ~ age,data=data_org))$coef
fit_C <- confint(lm(outcome_data ~ age,data=data_org))
mar_tab$marg[2:3] <- data.frame(cbind(rownames(fit),paste0(round(fit[,1],2)," (",round(fit_C[,1],2)," to ",round(fit_C[,2],2),")")))[-1,2]
fit <- summary(lm(outcome_data ~ bmi_cat,data=data_org))$coef
fit_C <- confint(lm(outcome_data ~ bmi_cat,data=data_org))
mar_tab$marg[4:5] <- data.frame(cbind(rownames(fit),paste0(round(fit[,1],2)," (",round(fit_C[,1],2)," to ",round(fit_C[,2],2),")")))[-1,2]
fit <- summary(lm(outcome_data ~ sys_blood_pres_high,data=data_org))$coef
fit_C <- confint(lm(outcome_data ~ sys_blood_pres_high,data=data_org))
mar_tab$marg[6] <- data.frame(cbind(rownames(fit),paste0(round(fit[,1],2)," (",round(fit_C[,1],2)," to ",round(fit_C[,2],2),")")))[-1,2]
mar_tab
# Causally adjusted
mar_tab$cau <- NA
fit <- summary(lm(outcome_data ~ sex_isFemale,data=data_org))$coef
fit_C <- confint(lm(outcome_data ~sex_isFemale,data=data_org))
mar_tab$cau[1] <- data.frame(cbind(rownames(fit),paste0(round(fit[,1],2)," (",round(fit_C[,1],2)," to ",round(fit_C[,2],2),")")))[-1,2]
fit <- summary(lm(outcome_data ~ age,data=data_org))$coef
fit_C <- confint(lm(outcome_data ~ age,data=data_org))
mar_tab$cau[2:3] <- data.frame(cbind(rownames(fit),paste0(round(fit[,1],2)," (",round(fit_C[,1],2)," to ",round(fit_C[,2],2),")")))[-1,2]
fit <- summary(lm(outcome_data ~ bmi_cat+age,data=data_org))$coef
fit_C <- confint(lm(outcome_data ~ bmi_cat+age,data=data_org))
mar_tab$cau[4:5] <- data.frame(cbind(rownames(fit),paste0(round(fit[,1],2)," (",round(fit_C[,1],2)," to ",round(fit_C[,2],2),")")))[2:3,2]
fit <- summary(lm(outcome_data ~ sys_blood_pres_high+bmi_cat+age,data=data_org))$coef
fit_C <- confint(lm(outcome_data ~ sys_blood_pres_high+bmi_cat+age,data=data_org))
mar_tab$cau[6] <- data.frame(cbind(rownames(fit),paste0(round(fit[,1],2)," (",round(fit_C[,1],2)," to ",round(fit_C[,2],2),")")))[2,2]
mar_tab
# r?kkef?lge
mar_tab <- mar_tab[,c(1,3,4,2)]
View(mar_tab)




######################### Ikke brugt ################################

man <- ifelse(data$sex_isFemale=="False",1,0)
age40 <- ifelse(data$age==40,1,0)
high_blood_pressure <- ifelse(data$sys_blood_pres_high==1,1,0)
bmi_low <- ifelse(data$bmi_cat==1,1,0)
outcome_data <- data$outcome_data
summary(lm(outcome_data~man+age40+high_blood_pressure+bmi_low+man:age40:high_blood_pressure:bmi_low))

fit <- summary(lm(outcome_data~man+age40+high_blood_pressure+bmi_low+man:age40:high_blood_pressure:bmi_low))$coef
fit_C <- confint(lm(outcome_data~man+age40+high_blood_pressure+bmi_low+man:age40:high_blood_pressure:bmi_low))
View(cbind(rownames(fit),paste0(round(fit[,1],2)," (",round(fit_C[,1],2),"-",round(fit_C[,2],2),")")))

man <- ifelse(hold_out$sex_isFemale=="False",1,0)
age40 <- ifelse(hold_out$age==40,1,0)
high_blood_pressure <- ifelse(hold_out$sys_blood_pres_high==1,1,0)
bmi_low <- ifelse(hold_out$bmi_cat==1,1,0)
outcome_data <- hold_out$outcome_data
summary(lm(outcome_data~man+age40+high_blood_pressure+bmi_low+man:age40:high_blood_pressure:bmi_low))

fit <- summary(lm(outcome_data~man+age40+high_blood_pressure+bmi_low+man:age40:high_blood_pressure:bmi_low))$coef
fit_C <- confint(lm(outcome_data~man+age40+high_blood_pressure+bmi_low+man:age40:high_blood_pressure:bmi_low))
View(cbind(rownames(fit),paste0(round(fit[,1],2)," (",round(fit_C[,1],2),"-",round(fit_C[,2],2),")")))


# table(sg1[outcome_data==1])/table(sg1)
# data_org_d <- subset(data_org,data_org$outcome_data==1)
# table(data_org$age,data_org$sex_isFemale)
# table(data_org_d$age,data_org_d$sex_isFemale)
# table(data_org_d$age,data_org_d$sex_isFemale)/table(data_org$age,data_org$sex_isFemale)
# prop.table(table(data_org$age,data_org$sex_isFemale))







